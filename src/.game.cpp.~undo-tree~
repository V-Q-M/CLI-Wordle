(undo-tree-save-format-version . 1)
"f32060d624893d82e7691d36c514fbad0d1cd42f"
[nil nil nil nil (26692 29247 966813 453000) 0 nil]
([nil nil ((3194 . 3196) (#("  " 0 2 (fontified nil)) . 3193) (undo-tree-id412 . -2) (undo-tree-id413 . -2) (undo-tree-id414 . -2) (undo-tree-id415 . -2) (undo-tree-id416 . -2) (undo-tree-id417 . -2) (undo-tree-id418 . -2) (undo-tree-id419 . -2) (undo-tree-id420 . -2) (undo-tree-id421 . -2) (3193 . 3196) (#("  " 0 2 (fontified nil)) . 3192) (undo-tree-id422 . -2) (undo-tree-id423 . -2) (undo-tree-id424 . -2) (undo-tree-id425 . -2) (undo-tree-id426 . -2) (undo-tree-id427 . -2) (undo-tree-id428 . -2) (undo-tree-id429 . -2) (3191 . 3195)) nil (26692 29322 974592 461000) 0 nil] [nil nil ((2881 . 2882) (t 26692 25326 715681 695000)) ((#(")" 0 1 (fontified t)) . 2881) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1)) (26692 29247 721691 690000) 0 nil])
([nil nil ((3220 . 3222) (#("    " 0 4 (fontified nil)) . 3220) (undo-tree-id376 . -4) (undo-tree-id377 . -4) (undo-tree-id378 . -4) (undo-tree-id379 . -4) (undo-tree-id380 . -4) (undo-tree-id381 . -4) (undo-tree-id382 . -4) (undo-tree-id383 . -4) (undo-tree-id384 . -4) (undo-tree-id385 . -4) (undo-tree-id386 . -4) (3224 . 3225) (3220 . 3224) (#("    " 0 4 (fontified nil)) . 3219) (undo-tree-id387 . -4) (undo-tree-id388 . -4) (undo-tree-id389 . -4) (undo-tree-id390 . -4) (undo-tree-id391 . -4) (undo-tree-id392 . -4) (undo-tree-id393 . -4) (undo-tree-id394 . -4) (undo-tree-id395 . -4) (undo-tree-id396 . -4) (undo-tree-id397 . -4) (undo-tree-id398 . -4) (undo-tree-id399 . -4) (undo-tree-id400 . -4) (undo-tree-id401 . -4) (3218 . 3224) (3217 . 3218) (3216 . 3217) (3215 . 3216) (3213 . 3215) (#("\\" 0 1 (c-is-sws t c-in-sws t fontified t)) . -3213) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) 3214 (3213 . 3214) (3212 . 3213) (3209 . 3212) (3198 . 3209) (#("cur" 0 3 (fontified nil)) . 3198) (3198 . 3201) (#("current_key" 0 11 (fontified nil)) . -3198) (3198 . 3209) (#("curre" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . -3198) (undo-tree-id408 . -5) (undo-tree-id409 . -5) (undo-tree-id410 . -5) (undo-tree-id411 . -5) 3203 (3198 . 3203) (3197 . 3198) (3194 . 3197) (3192 . 3194)) nil (26692 29322 974538 806000) 0 nil])
([nil nil ((2841 . 2842)) ((#("(" 0 1 (fontified t)) . 2841)) (26692 29247 551096 983000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3223 . 3224) (#("
" 0 1 (fontified nil)) . -3397) (3219 . 3398)) nil (26692 29322 974530 462000) 0 nil])
([nil nil ((2899 . 2903) (#("-" 0 1 (fontified t)) . -2899) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id21 . -1) (undo-tree-id23 . -1) (undo-tree-id25 . -1) (undo-tree-id27 . -1) (undo-tree-id29 . -1) 2900 (2898 . 2900) (2887 . 2898) (#("c" 0 1 (fontified nil)) . 2887) (2887 . 2888) (#("current_key" 0 11 (fontified nil)) . -2887) (2887 . 2898) (#("c" 0 1 (fontified t)) . -2887) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) 2888 (2886 . 2888) (2883 . 2886)) ((#(" ||" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 2883) (undo-tree-id227 . -3) (undo-tree-id228 . -3) (undo-tree-id229 . -3) (undo-tree-id230 . -3) (undo-tree-id231 . -3) (undo-tree-id232 . -3) (undo-tree-id233 . -3) (undo-tree-id234 . -3) (undo-tree-id235 . -3) (undo-tree-id236 . -3) (undo-tree-id237 . -3) (#(" c" 0 1 (fontified nil) 1 2 (fontified nil)) . 2886) (undo-tree-id238 . -2) (undo-tree-id239 . -1) (undo-tree-id240 . -2) (undo-tree-id241 . -2) (undo-tree-id242 . -2) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (2887 . 2888) (#("current_key" 0 11 (fontified nil)) . 2887) (2887 . 2898) (#("c" 0 1 (fontified nil)) . 2887) (2887 . 2888) (#("current_key" 0 11 (fontified nil)) . 2887) (undo-tree-id249 . -11) (undo-tree-id250 . -11) (undo-tree-id251 . -11) (undo-tree-id252 . -11) (undo-tree-id253 . -11) (undo-tree-id254 . -11) (undo-tree-id255 . -11) (undo-tree-id256 . -11) (#(" -" 0 1 (fontified nil) 1 2 (fontified nil)) . 2898) (undo-tree-id257 . -2) (undo-tree-id258 . -2) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (2899 . 2900) (#("= 32" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 2899) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1)) (26692 29246 759390 239000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 3219) (undo-tree-id375 . -1)) nil (26692 29322 974529 926000) 0 nil])
([nil nil ((2900 . 2901) (#("-" 0 1 (fontified t)) . -2900) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id128 . -1) (undo-tree-id130 . -1) (undo-tree-id132 . -1) (undo-tree-id134 . -1) 2901 (2900 . 2901)) ((#("-" 0 1 (fontified nil)) . 2900) (2900 . 2901) (#("=" 0 1 (fontified t)) . 2900)) (26692 29246 583678 350000) 0 nil] [nil nil ((#("    " 0 4 (fontified t)) . -2938) (undo-tree-id0 . -4) (undo-tree-id1 . -4) (undo-tree-id2 . -4) (undo-tree-id3 . -4) (undo-tree-id4 . -4) (undo-tree-id5 . -4) (undo-tree-id6 . -4) (undo-tree-id7 . -4) (undo-tree-id8 . -4) (undo-tree-id9 . -4) (undo-tree-id10 . -4) (undo-tree-id11 . -4) (undo-tree-id12 . -4) (undo-tree-id13 . -4) (undo-tree-id14 . -4) (undo-tree-id15 . -4) (undo-tree-id16 . -4) (undo-tree-id17 . -4) 2942 (2937 . 2942) 2900) ((#("
    " 0 1 (fontified t) 1 5 (fontified nil)) . 2937) (undo-tree-id35 . -5) (undo-tree-id36 . -5) (undo-tree-id37 . -5) (undo-tree-id38 . -5) (undo-tree-id39 . -5) (undo-tree-id40 . -5) (undo-tree-id41 . -5) (undo-tree-id42 . -5) (undo-tree-id43 . -5) (undo-tree-id44 . -5) (undo-tree-id45 . -5) (undo-tree-id46 . -5) (undo-tree-id47 . -5) (undo-tree-id48 . -5) (undo-tree-id49 . -5) (undo-tree-id50 . -5) (undo-tree-id51 . -5) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (2938 . 2942)) (26692 29144 583346 493000) 0 nil])
([nil nil ((1 . 5008) (#("#include \"../include/game.hpp\"
#include \"../include/terminal_input.hpp\"
#include \"../include/utils.hpp\"
#include \"../include/visuals.hpp\"
#include \"../include/word_machine.hpp\"
#include <cctype>
#include <iostream>
#include <string>
#include <unistd.h> // For usleep
#include <vector>
// WORDLE

int WORD_LENGTH = 5;
int AMOUNT_OF_WORDS = 6;

char cursor_char = '_';

int word_position = 0;
bool won = false;
bool lost = false;

std::string solution;
// Stores the letters which get visualized
std::vector<std::vector<std::string>> enteredWords;

// Array needed for colorization
std::vector<std::vector<int>> letter_color;

std::string attempt = \"\";

// Dictates the current row
int attempt_counter = 0;

constexpr int GREEN_ID = 1;
constexpr int YELLOW_ID = 2;
constexpr int GREY_ID = 3;

bool invalid_word_msg = false;
bool invalid_length_msg = false;
bool show_menu = false;

void try_guess() {
  //
  for (int i = 0; i < WORD_LENGTH; i++) {
    if (!enteredWords[attempt_counter][i].empty()) {
      attempt += std::tolower(enteredWords[attempt_counter][i][0]);
    } else {
      attempt += cursor_char; // or some sentinel char
    }
  }
  if (WORD_LENGTH == 5) {
    if (acceptableWords5.count(attempt) == 0) {
      invalid_word_msg = true;
      attempt = \"\";
      return;
    }

  } else if (WORD_LENGTH == 6) {
    if (acceptableWords6.count(attempt) == 0) {
      invalid_word_msg = true;
      attempt = \"\";
      return;
    }
  } else if (WORD_LENGTH == 7) {
    if (acceptableWords7.count(attempt) == 0) {
      invalid_word_msg = true;
      attempt = \"\";
      return;
    }
  }
  if (attempt == solution) {
    won = true;
  }
  // Track matched positions
  std::vector<bool> matchedSolution = {false};
  std::vector<bool> matchedAttempt = {false};
  matchedSolution.resize(WORD_LENGTH);
  matchedAttempt.resize(WORD_LENGTH);

  // First pass: Green letters
  for (int i = 0; i < WORD_LENGTH; i++) {
    if (attempt[i] == solution[i]) {
      letter_color[attempt_counter][i] = GREEN_ID;
      matchedSolution[i] = true;
      matchedAttempt[i] = true;
    }
  }

  // Second pass: Yellow letters
  for (int i = 0; i < WORD_LENGTH; i++) {
    if (matchedAttempt[i])
      continue; // already green

    bool found_yellow = false;
    for (int j = 0; j < WORD_LENGTH; j++) {
      if (!matchedSolution[j] && attempt[i] == solution[j]) {
        letter_color[attempt_counter][i] = YELLOW_ID;
        matchedSolution[j] = true;
        found_yellow = true;
        break;
      }
    }
    if (!found_yellow) {
      letter_color[attempt_counter][i] = GREY_ID;
    }
  }
  attempt = \"\";
  word_position = 0;
  if (attempt_counter + 1 == AMOUNT_OF_WORDS) {
    lost = true;
    return;
  }
  attempt_counter++;
  enteredWords[attempt_counter][word_position] = \"_\";
}

void handle_input() {
  // Display player input
  if (current_key >= 'a' && current_key <= 'z' && word_position < WORD_LENGTH) {
    enteredWords[attempt_counter][word_position] =
        std::string(1, current_key - 32);
    current_key = 0; // reset key to not trigger spam
    word_position++;
    if (word_position < WORD_LENGTH) {
      enteredWords[attempt_counter][word_position] = '_';
    }
  }

  if (current_key == 32) {
    current_key = 0; // reset key to not trigger spam
    word_position++;
    if (word_position < WORD_LENGTH) {
      enteredWords[attempt_counter][word_position] = '_';
    }
  }

  
  if (backspace_pressed) {
    backspace_pressed = false; // reset immediately
    if (word_position > 0) {
      if (word_position < WORD_LENGTH) {
        enteredWords[attempt_counter][word_position] = \"\";
      }
      word_position--;
      enteredWords[attempt_counter][word_position] = '_';
    }
  }

  if (enter_pressed) {
    enter_pressed = false;
    if (word_position == WORD_LENGTH) {
      try_guess();
    } else {
      invalid_length_msg = true;
    }
  }
  if (tab_pressed) {
    tab_pressed = false;
    show_menu = true;
  }
}

std::string get_solution() { return solution; }

void setup_game() {
  solution = random_word();

  enteredWords.resize(AMOUNT_OF_WORDS);

  for (std::vector<std::string> &row : enteredWords) {
    row.resize(WORD_LENGTH);
  }

  letter_color.resize(AMOUNT_OF_WORDS);
  for (std::vector<int> &row : letter_color) {
    row.resize(WORD_LENGTH);
  }

  // intialize the board with one space
  for (int i = 0; i < AMOUNT_OF_WORDS; i++) {
    for (int j = 0; j < WORD_LENGTH; j++) {
      enteredWords[i][j] = \" \";
    }
  }
}

int won_code = 1;
int lost_code = 2;

int check_game_over() {
  if (won) {
    clear_screen();
    print_board(enteredWords, won_code);
    std::cout << \"You won!\\n\";
    return 0;
  } else if (lost) {
    clear_screen();
    print_board(enteredWords, lost_code);
    std::cout << \"You lost! The answer was: \" << solution << \"\\n\";
    return 0;
  }
  return 69;
}

int update_game() {
  clear_screen();
  print_board(enteredWords, 0);
  handle_input();
  clear_screen();
  print_board(enteredWords, 0);

  return check_game_over();
}
" 0 1 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 1 8 (c-in-sws t face font-lock-preprocessor-face fontified t) 8 9 (c-in-sws t fontified t) 9 30 (c-in-sws t face font-lock-string-face fontified t) 30 31 (c-in-sws t fontified t) 31 32 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 32 39 (c-in-sws t face font-lock-preprocessor-face fontified t) 39 40 (c-in-sws t fontified t) 40 71 (c-in-sws t face font-lock-string-face fontified t) 71 72 (c-in-sws t fontified t) 72 73 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 73 80 (c-in-sws t face font-lock-preprocessor-face fontified t) 80 81 (c-in-sws t fontified t) 81 103 (c-in-sws t face font-lock-string-face fontified t) 103 104 (c-in-sws t fontified t) 104 105 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 105 112 (c-in-sws t face font-lock-preprocessor-face fontified t) 112 113 (c-in-sws t fontified t) 113 137 (c-in-sws t face font-lock-string-face fontified t) 137 138 (c-in-sws t fontified t) 138 139 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 139 146 (c-in-sws t face font-lock-preprocessor-face fontified t) 146 147 (c-in-sws t fontified t) 147 176 (c-in-sws t face font-lock-string-face fontified t) 176 177 (c-in-sws t fontified t) 177 178 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 178 185 (c-in-sws t face font-lock-preprocessor-face fontified t) 185 186 (c-in-sws t fontified t) 186 187 (c-in-sws t category c-<-as-paren-syntax face font-lock-string-face fontified t) 187 193 (c-in-sws t face font-lock-string-face fontified t) 193 194 (c-in-sws t category c->-as-paren-syntax face font-lock-string-face fontified t) 194 195 (c-in-sws t fontified t) 195 196 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 196 203 (c-in-sws t face font-lock-preprocessor-face fontified t) 203 204 (c-in-sws t fontified t) 204 205 (c-in-sws t category c-<-as-paren-syntax face font-lock-string-face fontified t) 205 213 (c-in-sws t face font-lock-string-face fontified t) 213 214 (c-in-sws t category c->-as-paren-syntax face font-lock-string-face fontified t) 214 215 (c-in-sws t fontified t) 215 216 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 216 223 (c-in-sws t face font-lock-preprocessor-face fontified t) 223 224 (c-in-sws t fontified t) 224 225 (c-in-sws t category c-<-as-paren-syntax face font-lock-string-face fontified t) 225 231 (c-in-sws t face font-lock-string-face fontified t) 231 232 (c-in-sws t category c->-as-paren-syntax face font-lock-string-face fontified t) 232 233 (c-in-sws t fontified t) 233 234 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 234 241 (c-in-sws t face font-lock-preprocessor-face fontified t) 241 242 (c-in-sws t fontified t) 242 243 (c-in-sws t category c-<-as-paren-syntax face font-lock-string-face fontified t) 243 251 (c-in-sws t face font-lock-string-face fontified t) 251 252 (c-in-sws t category c->-as-paren-syntax face font-lock-string-face fontified t) 252 253 (c-in-sws t fontified t) 253 256 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 256 267 (c-in-sws t face font-lock-comment-face fontified t) 267 268 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 268 275 (c-in-sws t face font-lock-preprocessor-face fontified t) 275 276 (c-in-sws t fontified t) 276 277 (c-in-sws t category c-<-as-paren-syntax face font-lock-string-face fontified t) 277 283 (c-in-sws t face font-lock-string-face fontified t) 283 284 (c-in-sws t category c->-as-paren-syntax face font-lock-string-face fontified t) 284 285 (c-in-sws t fontified t) 285 286 (c-in-sws t c-is-sws t face font-lock-comment-delimiter-face fontified t) 286 288 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 288 295 (c-in-sws t face font-lock-comment-face fontified t) 295 296 (c-in-sws t fontified t) 296 297 (face font-lock-type-face c-is-sws t fontified t) 297 298 (face font-lock-type-face fontified t) 298 299 (face font-lock-type-face c-type c-decl-id-start fontified t) 299 300 (fontified t) 300 311 (face font-lock-variable-name-face fontified t) 311 317 (fontified t) 317 319 (face font-lock-type-face fontified t) 319 320 (face font-lock-type-face c-type c-decl-id-start fontified t) 320 321 (fontified t) 321 336 (face font-lock-variable-name-face fontified t) 336 343 (fontified t) 343 346 (face font-lock-type-face fontified t) 346 347 (face font-lock-type-face c-type c-decl-id-start fontified t) 347 348 (fontified t) 348 359 (face font-lock-variable-name-face fontified t) 359 362 (fontified t) 362 365 (face font-lock-string-face fontified t) 365 368 (fontified t) 368 370 (face font-lock-type-face fontified t) 370 371 (face font-lock-type-face c-type c-decl-id-start fontified t) 371 372 (fontified t) 372 385 (face font-lock-variable-name-face fontified t) 385 391 (fontified t) 391 394 (face font-lock-type-face fontified t) 394 395 (face font-lock-type-face c-type c-decl-id-start fontified t) 395 396 (fontified t) 396 399 (face font-lock-variable-name-face fontified t) 399 402 (fontified t) 402 407 (face font-lock-constant-face fontified t) 407 409 (fontified t) 409 412 (face font-lock-type-face fontified t) 412 413 (face font-lock-type-face c-type c-decl-id-start fontified t) 413 414 (fontified t) 414 418 (face font-lock-variable-name-face fontified t) 418 421 (fontified t) 421 426 (face font-lock-constant-face fontified t) 426 429 (fontified t) 429 432 (face font-lock-constant-face fontified t) 432 434 (fontified t) 434 439 (face font-lock-type-face fontified t) 439 440 (face font-lock-type-face c-type c-decl-id-start fontified t) 440 441 (fontified t) 441 449 (face font-lock-variable-name-face fontified t) 449 451 (fontified t) 451 452 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 452 454 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 454 494 (c-in-sws t face font-lock-comment-face fontified t) 494 495 (c-is-sws t face font-lock-constant-face fontified t) 495 497 (face font-lock-constant-face fontified t) 497 499 (fontified t) 499 505 (face font-lock-type-face fontified t) 505 506 (category c-<-as-paren-syntax fontified t) 506 509 (face font-lock-constant-face fontified t) 509 511 (fontified t) 511 517 (face font-lock-type-face fontified t) 517 518 (category c-<-as-paren-syntax fontified t) 518 521 (face font-lock-constant-face fontified t) 521 523 (fontified t) 523 529 (face font-lock-type-face fontified t) 529 530 (category c->-as-paren-syntax fontified t) 530 531 (c-type c-decl-id-start category c->-as-paren-syntax fontified t) 531 532 (fontified t) 532 544 (face font-lock-variable-name-face fontified t) 544 547 (fontified t) 547 548 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 548 550 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 550 580 (c-in-sws t face font-lock-comment-face fontified t) 580 581 (c-is-sws t face font-lock-constant-face fontified t) 581 583 (face font-lock-constant-face fontified t) 583 585 (fontified t) 585 591 (face font-lock-type-face fontified t) 591 592 (category c-<-as-paren-syntax fontified t) 592 595 (face font-lock-constant-face fontified t) 595 597 (fontified t) 597 603 (face font-lock-type-face fontified t) 603 604 (category c-<-as-paren-syntax fontified t) 604 607 (face font-lock-type-face fontified t) 607 608 (category c->-as-paren-syntax fontified t) 608 609 (c-type c-decl-id-start category c->-as-paren-syntax fontified t) 609 610 (fontified t) 610 622 (face font-lock-variable-name-face fontified t) 622 625 (fontified t) 625 628 (face font-lock-constant-face fontified t) 628 630 (fontified t) 630 635 (face font-lock-type-face fontified t) 635 636 (face font-lock-type-face c-type c-decl-id-start fontified t) 636 637 (fontified t) 637 644 (face font-lock-variable-name-face fontified t) 644 647 (fontified t) 647 649 (face font-lock-string-face fontified t) 649 652 (fontified t) 652 653 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 653 655 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 655 680 (c-in-sws t face font-lock-comment-face fontified t) 680 681 (face font-lock-type-face c-is-sws t fontified t) 681 682 (face font-lock-type-face fontified t) 682 683 (face font-lock-type-face c-type c-decl-id-start fontified t) 683 684 (fontified t) 684 699 (face font-lock-variable-name-face fontified t) 699 706 (fontified t) 706 715 (face font-lock-keyword-face fontified t) 715 716 (fontified t) 716 718 (face font-lock-type-face fontified t) 718 719 (face font-lock-type-face c-type c-decl-id-start fontified t) 719 720 (fontified t) 720 728 (face font-lock-variable-name-face fontified t) 728 734 (fontified t) 734 743 (face font-lock-keyword-face fontified t) 743 744 (fontified t) 744 746 (face font-lock-type-face fontified t) 746 747 (face font-lock-type-face c-type c-decl-id-start fontified t) 747 748 (fontified t) 748 757 (face font-lock-variable-name-face fontified t) 757 763 (fontified t) 763 772 (face font-lock-keyword-face fontified t) 772 773 (fontified t) 773 775 (face font-lock-type-face fontified t) 775 776 (face font-lock-type-face c-type c-decl-id-start fontified t) 776 777 (fontified t) 777 784 (face font-lock-variable-name-face fontified t) 784 791 (fontified t) 791 794 (face font-lock-type-face fontified t) 794 795 (face font-lock-type-face c-type c-decl-id-start fontified t) 795 796 (fontified t) 796 812 (face font-lock-variable-name-face fontified t) 812 815 (fontified t) 815 820 (face font-lock-constant-face fontified t) 820 822 (fontified t) 822 825 (face font-lock-type-face fontified t) 825 826 (face font-lock-type-face c-type c-decl-id-start fontified t) 826 827 (fontified t) 827 845 (face font-lock-variable-name-face fontified t) 845 848 (fontified t) 848 853 (face font-lock-constant-face fontified t) 853 855 (fontified t) 855 858 (face font-lock-type-face fontified t) 858 859 (face font-lock-type-face c-type c-decl-id-start fontified t) 859 860 (fontified t) 860 869 (face font-lock-variable-name-face fontified t) 869 872 (fontified t) 872 877 (face font-lock-constant-face fontified t) 877 880 (fontified t) 880 883 (face font-lock-type-face fontified t) 883 884 (face font-lock-type-face c-type c-decl-id-start fontified t) 884 885 (fontified t) 885 894 (face font-lock-function-name-face fontified t) 894 899 (fontified t) 899 901 (c-is-sws t c-in-sws t fontified t) 901 902 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 902 903 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 903 904 (c-in-sws t face font-lock-comment-face fontified t) 904 906 (c-in-sws t c-is-sws t fontified t) 906 907 (c-is-sws t face font-lock-keyword-face fontified t) 907 909 (face font-lock-keyword-face fontified t) 909 911 (fontified t) 911 913 (face font-lock-type-face fontified t) 913 914 (face font-lock-type-face c-type c-decl-id-start fontified t) 914 915 (fontified t) 915 916 (face font-lock-variable-name-face fontified t) 916 950 (fontified t) 950 952 (face font-lock-keyword-face fontified t) 952 954 (fontified t) 954 955 (face font-lock-negation-char-face fontified t) 955 1016 (fontified t) 1016 1019 (face font-lock-constant-face fontified t) 1019 1073 (fontified t) 1073 1077 (face font-lock-keyword-face fontified t) 1077 1110 (fontified t) 1110 1113 (face font-lock-comment-delimiter-face fontified t) 1113 1135 (face font-lock-comment-face fontified t) 1135 1147 (fontified t) 1147 1149 (face font-lock-keyword-face fontified t) 1149 1175 (fontified t) 1175 1177 (face font-lock-keyword-face fontified t) 1177 1244 (fontified t) 1244 1248 (face font-lock-constant-face fontified t) 1248 1266 (fontified t) 1266 1268 (face font-lock-string-face fontified t) 1268 1276 (fontified t) 1276 1282 (face font-lock-keyword-face fontified t) 1282 1295 (fontified t) 1295 1299 (face font-lock-keyword-face fontified t) 1299 1300 (fontified t) 1300 1302 (face font-lock-keyword-face fontified t) 1302 1328 (fontified t) 1328 1330 (face font-lock-keyword-face fontified t) 1330 1397 (fontified t) 1397 1401 (face font-lock-constant-face fontified t) 1401 1419 (fontified t) 1419 1421 (face font-lock-string-face fontified t) 1421 1429 (fontified t) 1429 1435 (face font-lock-keyword-face fontified t) 1435 1447 (fontified t) 1447 1451 (face font-lock-keyword-face fontified t) 1451 1452 (fontified t) 1452 1454 (face font-lock-keyword-face fontified t) 1454 1476 (fontified t) 1476 1480 (fontified t) 1480 1482 (face font-lock-keyword-face fontified t) 1482 1500 (fontified t) 1500 1518 (fontified t) 1518 1549 (fontified t) 1549 1553 (face font-lock-constant-face fontified t) 1553 1571 (fontified t) 1571 1573 (face font-lock-string-face fontified t) 1573 1581 (fontified t) 1581 1587 (face font-lock-keyword-face fontified t) 1587 1601 (fontified t) 1601 1603 (face font-lock-keyword-face fontified t) 1603 1638 (fontified t) 1638 1642 (face font-lock-constant-face fontified t) 1642 1648 (fontified t) 1648 1650 (c-is-sws t c-in-sws t fontified t) 1650 1651 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 1651 1653 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 1653 1677 (c-in-sws t face font-lock-comment-face fontified t) 1677 1679 (c-in-sws t c-is-sws t fontified t) 1679 1680 (c-is-sws t face font-lock-constant-face fontified t) 1680 1682 (face font-lock-constant-face fontified t) 1682 1684 (fontified t) 1684 1690 (face font-lock-type-face fontified t) 1690 1691 (category c-<-as-paren-syntax fontified t) 1691 1695 (face font-lock-type-face fontified t) 1695 1696 (c-type c-decl-id-start category c->-as-paren-syntax fontified t) 1696 1697 (fontified t) 1697 1712 (face font-lock-variable-name-face fontified t) 1712 1715 (fontified t) 1715 1716 (c-type c-not-decl fontified t) 1716 1721 (face font-lock-constant-face fontified t) 1721 1726 (fontified t) 1726 1729 (face font-lock-constant-face fontified t) 1729 1731 (fontified t) 1731 1737 (face font-lock-type-face fontified t) 1737 1738 (category c-<-as-paren-syntax fontified t) 1738 1742 (face font-lock-type-face fontified t) 1742 1743 (c-type c-decl-id-start category c->-as-paren-syntax fontified t) 1743 1744 (fontified t) 1744 1758 (face font-lock-variable-name-face fontified t) 1758 1761 (fontified t) 1761 1762 (c-type c-not-decl fontified t) 1762 1767 (face font-lock-constant-face fontified t) 1767 1848 (fontified t) 1848 1850 (c-is-sws t c-in-sws t fontified t) 1850 1851 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 1851 1853 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 1853 1879 (c-in-sws t face font-lock-comment-face fontified t) 1879 1881 (c-in-sws t c-is-sws t fontified t) 1881 1882 (c-is-sws t face font-lock-keyword-face fontified t) 1882 1884 (face font-lock-keyword-face fontified t) 1884 1886 (fontified t) 1886 1888 (face font-lock-type-face fontified t) 1888 1889 (face font-lock-type-face c-type c-decl-id-start fontified t) 1889 1890 (fontified t) 1890 1891 (face font-lock-variable-name-face fontified t) 1891 1925 (fontified t) 1925 1927 (face font-lock-keyword-face fontified t) 1927 2036 (fontified t) 2036 2040 (face font-lock-constant-face fontified t) 2040 2068 (fontified t) 2068 2072 (face font-lock-constant-face fontified t) 2072 2087 (fontified t) 2087 2090 (face font-lock-comment-delimiter-face fontified t) 2090 2118 (face font-lock-comment-face fontified t) 2118 2120 (fontified t) 2120 2123 (face font-lock-keyword-face fontified t) 2123 2125 (fontified t) 2125 2127 (face font-lock-type-face fontified t) 2127 2128 (face font-lock-type-face c-type c-decl-id-start fontified t) 2128 2129 (fontified t) 2129 2130 (face font-lock-variable-name-face fontified t) 2130 2164 (fontified t) 2164 2166 (face font-lock-keyword-face fontified t) 2166 2193 (fontified t) 2193 2201 (face font-lock-keyword-face fontified t) 2201 2202 (fontified t) 2202 2203 (c-is-sws t c-in-sws t fontified t) 2203 2204 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 2204 2206 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 2206 2220 (c-in-sws t face font-lock-comment-face fontified t) 2220 2221 (c-in-sws t fontified t) 2221 2225 (c-in-sws t c-is-sws t fontified t) 2225 2226 (face font-lock-type-face c-is-sws t fontified t) 2226 2228 (face font-lock-type-face fontified t) 2228 2229 (face font-lock-type-face c-type c-decl-id-start fontified t) 2229 2230 (fontified t) 2230 2242 (face font-lock-variable-name-face fontified t) 2242 2245 (fontified t) 2245 2250 (face font-lock-constant-face fontified t) 2250 2256 (fontified t) 2256 2259 (face font-lock-keyword-face fontified t) 2259 2261 (fontified t) 2261 2263 (face font-lock-type-face fontified t) 2263 2264 (face font-lock-type-face c-type c-decl-id-start fontified t) 2264 2265 (fontified t) 2265 2266 (face font-lock-variable-name-face fontified t) 2266 2302 (fontified t) 2302 2304 (face font-lock-keyword-face fontified t) 2304 2306 (fontified t) 2306 2307 (face font-lock-negation-char-face fontified t) 2307 2441 (fontified t) 2441 2445 (face font-lock-constant-face fontified t) 2445 2470 (fontified t) 2470 2474 (face font-lock-constant-face fontified t) 2474 2484 (fontified t) 2484 2489 (face font-lock-keyword-face fontified t) 2489 2509 (fontified t) 2509 2511 (face font-lock-keyword-face fontified t) 2511 2513 (fontified t) 2513 2514 (face font-lock-negation-char-face fontified t) 2514 2602 (fontified t) 2602 2604 (face font-lock-string-face fontified t) 2604 2629 (fontified t) 2629 2631 (face font-lock-keyword-face fontified t) 2631 2686 (fontified t) 2686 2690 (face font-lock-constant-face fontified t) 2690 2696 (fontified t) 2696 2702 (face font-lock-keyword-face fontified t) 2702 2704 (fontified t) 2704 2778 (fontified t) 2778 2781 (face font-lock-string-face fontified t) 2781 2786 (fontified t) 2786 2789 (face font-lock-type-face fontified t) 2789 2790 (face font-lock-type-face c-type c-decl-id-start fontified t) 2790 2791 (fontified t) 2791 2803 (face font-lock-function-name-face fontified t) 2803 2808 (fontified t) 2808 2810 (fontified t c-is-sws t c-in-sws t) 2810 2811 (face font-lock-comment-delimiter-face fontified t c-in-sws t c-is-sws t) 2811 2813 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 2813 2833 (face font-lock-comment-face fontified t c-in-sws t) 2833 2834 (c-in-sws t face font-lock-comment-face fontified t) 2834 2835 (fontified t c-in-sws t c-is-sws t) 2835 2836 (fontified t c-is-sws t c-in-sws t) 2836 2837 (face font-lock-keyword-face fontified t c-is-sws t) 2837 2838 (face font-lock-keyword-face fontified t) 2838 2840 (fontified t) 2840 2854 (fontified t) 2854 2855 (fontified t) 2855 2858 (face font-lock-string-face fontified t) 2858 2877 (fontified t) 2877 2880 (face font-lock-string-face fontified t) 2880 2914 (fontified t) 2914 2915 (fontified t) 2915 2974 (fontified t) 2974 2977 (face font-lock-constant-face fontified t) 2977 3008 (fontified t) 3008 3018 (fontified t) 3018 3025 (fontified t) 3025 3028 (fontified t) 3028 3029 (fontified t c-is-sws t c-in-sws t) 3029 3030 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 3030 3032 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 3032 3062 (face font-lock-comment-face fontified t c-in-sws t) 3062 3066 (fontified t c-in-sws t c-is-sws t) 3066 3067 (fontified t c-is-sws t) 3067 3087 (fontified t) 3087 3089 (face font-lock-keyword-face fontified t) 3089 3175 (fontified t) 3175 3178 (face font-lock-string-face fontified t) 3178 3190 (fontified t) 3190 3191 (fontified t) 3191 3193 (fontified t) 3193 3194 (face font-lock-keyword-face fontified t) 3194 3195 (face font-lock-keyword-face fontified t) 3195 3196 (fontified t) 3196 3197 (fontified t) 3197 3208 (fontified t) 3208 3209 (fontified t) 3209 3210 (fontified t) 3210 3211 (fontified t) 3211 3212 (c-is-sws t c-in-sws t fontified t) 3212 3213 (fontified t) 3213 3214 (fontified t) 3214 3215 (fontified t) 3215 3216 (fontified t) 3216 3217 (fontified t) 3217 3218 (fontified t) 3218 3221 (fontified t) 3221 3222 (rear-nonsticky t fontified t) 3222 3228 (fontified t) 3228 3235 (fontified t) 3235 3238 (fontified t) 3238 3239 (c-is-sws t c-in-sws t fontified t) 3239 3240 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 3240 3242 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 3242 3271 (face font-lock-comment-face c-in-sws t fontified t) 3271 3272 (c-in-sws t face font-lock-comment-face fontified t) 3272 3276 (fontified t c-in-sws t c-is-sws t) 3276 3277 (fontified t c-is-sws t) 3277 3297 (fontified t) 3297 3299 (face font-lock-keyword-face fontified t) 3299 3385 (fontified t) 3385 3388 (face font-lock-string-face fontified t) 3388 3395 (fontified t) 3395 3396 (fontified t) 3396 3398 (fontified t) 3398 3399 (fontified t) 3399 3400 (fontified t) 3400 3401 (fontified t c-is-sws t) 3401 3403 (fontified t) 3403 3404 (fontified t) 3404 3406 (fontified t) 3406 3408 (face font-lock-keyword-face fontified t) 3408 3429 (fontified t) 3429 3430 (fontified t) 3430 3455 (fontified t) 3455 3460 (face font-lock-constant-face fontified t) 3460 3461 (fontified t) 3461 3462 (fontified t c-is-sws t c-in-sws t) 3462 3463 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 3463 3465 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 3465 3483 (face font-lock-comment-face fontified t c-in-sws t) 3483 3487 (fontified t c-in-sws t c-is-sws t) 3487 3488 (face font-lock-keyword-face fontified t c-is-sws t) 3488 3489 (face font-lock-keyword-face fontified t) 3489 3518 (fontified t) 3518 3520 (face font-lock-keyword-face fontified t) 3520 3608 (fontified t) 3608 3610 (face font-lock-string-face fontified t) 3610 3612 (fontified t) 3612 3696 (fontified t) 3696 3699 (face font-lock-string-face fontified t) 3699 3714 (fontified t) 3714 3716 (face font-lock-keyword-face fontified t) 3716 3755 (fontified t) 3755 3760 (face font-lock-constant-face fontified t) 3760 3766 (fontified t) 3766 3768 (face font-lock-keyword-face fontified t) 3768 3827 (fontified t) 3827 3831 (face font-lock-keyword-face fontified t) 3831 3861 (fontified t) 3861 3865 (face font-lock-constant-face fontified t) 3865 3879 (fontified t) 3879 3881 (face font-lock-keyword-face fontified t) 3881 3916 (fontified t) 3916 3921 (face font-lock-constant-face fontified t) 3921 3939 (fontified t) 3939 3943 (face font-lock-constant-face fontified t) 3943 3952 (fontified t) 3952 3955 (face font-lock-constant-face fontified t) 3955 3957 (fontified t) 3957 3962 (face font-lock-type-face fontified t) 3962 3963 (face font-lock-type-face c-type c-decl-id-start fontified t) 3963 3964 (fontified t) 3964 3976 (face font-lock-function-name-face fontified t) 3976 3981 (fontified t) 3981 3987 (face font-lock-keyword-face fontified t) 3987 4001 (fontified t) 4001 4004 (face font-lock-type-face fontified t) 4004 4005 (face font-lock-type-face c-type c-decl-id-start fontified t) 4005 4006 (fontified t) 4006 4016 (face font-lock-function-name-face fontified t) 4016 4093 (fontified t) 4093 4096 (face font-lock-keyword-face fontified t) 4096 4098 (fontified t) 4098 4101 (face font-lock-constant-face fontified t) 4101 4103 (fontified t) 4103 4109 (face font-lock-type-face fontified t) 4109 4110 (fontified t category c-<-as-paren-syntax) 4110 4113 (face font-lock-constant-face fontified t) 4113 4115 (fontified t) 4115 4121 (face font-lock-type-face fontified t) 4121 4122 (c-type c-decl-id-start fontified t category c->-as-paren-syntax) 4122 4124 (fontified t) 4124 4127 (face font-lock-variable-name-face fontified t) 4127 4222 (fontified t) 4222 4225 (face font-lock-keyword-face fontified t) 4225 4227 (fontified t) 4227 4230 (face font-lock-constant-face fontified t) 4230 4232 (fontified t) 4232 4238 (face font-lock-type-face fontified t) 4238 4239 (fontified t category c-<-as-paren-syntax) 4239 4242 (face font-lock-type-face fontified t) 4242 4243 (c-type c-decl-id-start fontified t category c->-as-paren-syntax) 4243 4245 (fontified t) 4245 4248 (face font-lock-variable-name-face fontified t) 4248 4301 (fontified t) 4301 4303 (fontified t c-is-sws t c-in-sws t) 4303 4304 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 4304 4306 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 4306 4341 (face font-lock-comment-face fontified t c-in-sws t) 4341 4343 (fontified t c-in-sws t c-is-sws t) 4343 4344 (face font-lock-keyword-face fontified t c-is-sws t) 4344 4346 (face font-lock-keyword-face fontified t) 4346 4348 (fontified t) 4348 4350 (face font-lock-type-face fontified t) 4350 4351 (face font-lock-type-face c-type c-decl-id-start fontified t) 4351 4352 (fontified t) 4352 4353 (face font-lock-variable-name-face fontified t) 4353 4391 (fontified t) 4391 4392 (face font-lock-keyword-face fontified t) 4392 4393 (face font-lock-keyword-face fontified t) 4393 4394 (face font-lock-keyword-face fontified t) 4394 4396 (fontified t) 4396 4398 (face font-lock-type-face fontified t) 4398 4399 (face font-lock-type-face c-type c-decl-id-start fontified t) 4399 4400 (fontified t) 4400 4401 (face font-lock-variable-name-face fontified t) 4401 4431 (fontified t) 4431 4458 (fontified t) 4458 4461 (face font-lock-string-face fontified t) 4461 4476 (fontified t) 4476 4478 (face font-lock-type-face fontified t) 4478 4479 (face font-lock-type-face c-type c-decl-id-start fontified t) 4479 4480 (fontified t) 4480 4488 (face font-lock-variable-name-face fontified t) 4488 4494 (fontified t) 4494 4496 (face font-lock-type-face fontified t) 4496 4497 (face font-lock-type-face c-type c-decl-id-start fontified t) 4497 4498 (fontified t) 4498 4507 (face font-lock-variable-name-face fontified t) 4507 4514 (fontified t) 4514 4516 (face font-lock-type-face fontified t) 4516 4517 (face font-lock-type-face c-type c-decl-id-start fontified t) 4517 4518 (fontified t) 4518 4524 (face font-lock-function-name-face fontified t) 4524 4533 (face font-lock-function-name-face fontified t) 4533 4537 (fontified t) 4537 4540 (fontified t) 4540 4542 (face font-lock-keyword-face fontified t) 4542 4544 (fontified t) 4544 4551 (fontified t) 4551 4566 (fontified t) 4566 4570 (fontified t) 4570 4616 (fontified t) 4616 4619 (face font-lock-constant-face fontified t) 4619 4628 (fontified t) 4628 4629 (fontified t) 4629 4641 (face font-lock-string-face fontified t) 4641 4643 (fontified t) 4643 4647 (fontified t) 4647 4653 (face font-lock-keyword-face fontified t) 4653 4661 (fontified t) 4661 4665 (face font-lock-keyword-face fontified t) 4665 4666 (fontified t) 4666 4668 (face font-lock-keyword-face fontified t) 4668 4738 (fontified t) 4738 4740 (fontified t) 4740 4744 (fontified t) 4744 4747 (face font-lock-constant-face fontified t) 4747 4757 (fontified t) 4757 4772 (face font-lock-string-face fontified t) 4772 4785 (fontified t face font-lock-string-face) 4785 4801 (fontified t) 4801 4805 (fontified t face font-lock-string-face) 4805 4807 (fontified t) 4811 4817 (face font-lock-keyword-face) 4827 4833 (face font-lock-keyword-face) 4841 4843 (face font-lock-type-face) 4843 4844 (face font-lock-type-face c-type c-decl-id-start) 4845 4856 (face font-lock-function-name-face) 4982 4988 (face font-lock-keyword-face)) . 1) (undo-tree-id288 . -30) (undo-tree-id289 . -3395) (undo-tree-id290 . -4090) (undo-tree-id291 . -4090) (undo-tree-id292 . -4913) (undo-tree-id293 . -2252) (undo-tree-id294 . -3197) (undo-tree-id295 . -3488) (undo-tree-id296 . 1611) (undo-tree-id297 . -3197) (undo-tree-id298 . -3197) (undo-tree-id299 . -3191) (undo-tree-id300 . -3191) (undo-tree-id301 . -3191) (undo-tree-id302 . -3191) (undo-tree-id303 . -3191) (undo-tree-id304 . -3400) (undo-tree-id305 . -3400) (undo-tree-id306 . -3400) (undo-tree-id307 . -3400) (undo-tree-id308 . -3400) (undo-tree-id309 . -3400) (undo-tree-id310 . -3400) (undo-tree-id311 . -3218) (undo-tree-id312 . -3218) (undo-tree-id313 . -2252) (undo-tree-id314 . -3212) (undo-tree-id315 . -3212) (undo-tree-id316 . -3212) (undo-tree-id317 . 1611) (undo-tree-id318 . -3218) (undo-tree-id319 . -3218) (undo-tree-id320 . -3218) (undo-tree-id321 . -3218) (undo-tree-id322 . -3218) (undo-tree-id323 . -3218) (undo-tree-id324 . -3218) (undo-tree-id325 . -3218) (undo-tree-id326 . -3218) (undo-tree-id327 . -3218) (undo-tree-id328 . -3218) (undo-tree-id329 . -3218) (undo-tree-id330 . -3396) (undo-tree-id331 . -3396) (undo-tree-id332 . -3396) (undo-tree-id333 . -3396) (undo-tree-id334 . -3396) (undo-tree-id335 . -3396) (undo-tree-id336 . -3396) (undo-tree-id337 . -3396) (undo-tree-id338 . -3008) (undo-tree-id339 . 1824) (undo-tree-id340 . -3010) (undo-tree-id341 . -3182) (undo-tree-id342 . -3218) (undo-tree-id343 . -3395) (undo-tree-id344 . -3222) (undo-tree-id345 . -3222) (undo-tree-id346 . -3222) (undo-tree-id347 . -3222) (undo-tree-id348 . -3222) (undo-tree-id349 . -3222) (undo-tree-id350 . -3222) (undo-tree-id351 . -3218) (undo-tree-id352 . -3218) (undo-tree-id353 . -3218) (undo-tree-id354 . -3218) (undo-tree-id355 . -3271) (undo-tree-id356 . -3218) (undo-tree-id357 . -3218) (undo-tree-id358 . -3218) (undo-tree-id359 . -3218) (undo-tree-id360 . -3218) (undo-tree-id361 . -3218) (undo-tree-id362 . -3218) (undo-tree-id363 . -3218) (undo-tree-id364 . -3218) (undo-tree-id365 . -3218) (undo-tree-id366 . -3218) (undo-tree-id367 . -3218) (undo-tree-id368 . -3218) (undo-tree-id369 . -3218) (undo-tree-id370 . -3218) (undo-tree-id371 . -3218) (undo-tree-id372 . -3218) (undo-tree-id373 . -3218) (undo-tree-id374 . -2252) 3219) nil (26692 29322 974526 589000) 0 nil])
([nil nil ((2904 . 2905) (#("(" 0 1 (fontified t)) . -2904) (undo-tree-id121 . -1) (undo-tree-id122 . -1) 2905 (2904 . 2905) (#("(" 0 1 (fontified t)) . -2904) (undo-tree-id123 . -1) (undo-tree-id124 . -1) 2905 (2904 . 2905)) ((#("(" 0 1 (fontified nil)) . 2904) (2904 . 2905) (#("(" 0 1 (fontified nil)) . 2904) (2904 . 2905) (#(")" 0 1 (fontified t)) . 2904)) (26692 29246 370908 211000) 0 nil])
nil
([nil nil ((3924 . 3930) (#("        " 0 8 (fontified nil)) . 3924) (undo-tree-id465 . -8) (undo-tree-id466 . -8) (3932 . 3933) (#("{" 0 1 (fontified t)) . -3932) (undo-tree-id467 . -1) (undo-tree-id468 . -1) 3933 (3932 . 3933) (3924 . 3932) (#("        " 0 8 (fontified nil)) . 3923) (undo-tree-id469 . -8) (undo-tree-id470 . -8) (3922 . 3932) (3921 . 3922) (3914 . 3921) (3913 . 3914) (3904 . 3913) (#("sho" 0 3 (fontified nil)) . 3904) (3904 . 3907) (#("show_menu" 0 9 (fontified nil)) . -3904) (3904 . 3913) (#("show" 0 1 (face font-lock-type-face fontified t) 1 2 (face font-lock-type-face fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face c-type c-decl-id-start fontified t)) . -3904) (undo-tree-id471 . -4) (undo-tree-id472 . -4) (undo-tree-id473 . -4) (undo-tree-id474 . -4) 3908 (3904 . 3908) (3903 . 3904) (3900 . 3903) (3895 . 3900) (t 26692 29322 974976 678000)) nil (26692 29742 536282 679000) 0 nil])
([nil nil ((2842 . 2843) (#("*" 0 1 (fontified t)) . -2842) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id113 . -1) (undo-tree-id115 . -1) (undo-tree-id117 . -1) (undo-tree-id119 . -1) 2843 (2842 . 2843)) ((#("*" 0 1 (fontified nil)) . 2842) (2842 . 2843) ("(" . 2842)) (26692 29245 139535 615000) 0 nil])
([nil nil ((#("    tab_pressed = false;
" 0 4 (fontified t) 4 15 (fontified t) 15 17 (fontified t) 17 18 (fontified t) 18 23 (face font-lock-constant-face fontified t) 23 25 (fontified t)) . 3932) (undo-tree-id463 . -6) (undo-tree-id464 . -6) 3938) nil (26692 29742 536279 745000) 0 nil])
([nil nil ((1 . 4829) (#("#include \"../include/game.hpp\"
#include \"../include/terminal_input.hpp\"
#include \"../include/utils.hpp\"
#include \"../include/visuals.hpp\"
#include \"../include/word_machine.hpp\"
#include <cctype>
#include <iostream>
#include <string>
#include <unistd.h> // For usleep
#include <vector>
// WORDLE

int WORD_LENGTH = 5;
int AMOUNT_OF_WORDS = 6;

char cursor_char = '_';

int word_position = 0;
bool won = false;
bool lost = false;

std::string solution;
// Stores the letters which get visualized
std::vector<std::vector<std::string>> enteredWords;

// Array needed for colorization
std::vector<std::vector<int>> letter_color;

std::string attempt = \"\";

// Dictates the current row
int attempt_counter = 0;

constexpr int GREEN_ID = 1;
constexpr int YELLOW_ID = 2;
constexpr int GREY_ID = 3;

bool invalid_word_msg = false;
bool invalid_length_msg = false;
bool show_menu = false;

void try_guess() {
  //
  for (int i = 0; i < WORD_LENGTH; i++) {
    if (!enteredWords[attempt_counter][i].empty()) {
      attempt += std::tolower(enteredWords[attempt_counter][i][0]);
    } else {
      attempt += cursor_char; // or some sentinel char
    }
  }
  if (WORD_LENGTH == 5) {
    if (acceptableWords5.count(attempt) == 0) {
      invalid_word_msg = true;
      attempt = \"\";
      return;
    }

  } else if (WORD_LENGTH == 6) {
    if (acceptableWords6.count(attempt) == 0) {
      invalid_word_msg = true;
      attempt = \"\";
      return;
    }
  } else if (WORD_LENGTH == 7) {
    if (acceptableWords7.count(attempt) == 0) {
      invalid_word_msg = true;
      attempt = \"\";
      return;
    }
  }
  if (attempt == solution) {
    won = true;
  }
  // Track matched positions
  std::vector<bool> matchedSolution = {false};
  std::vector<bool> matchedAttempt = {false};
  matchedSolution.resize(WORD_LENGTH);
  matchedAttempt.resize(WORD_LENGTH);

  // First pass: Green letters
  for (int i = 0; i < WORD_LENGTH; i++) {
    if (attempt[i] == solution[i]) {
      letter_color[attempt_counter][i] = GREEN_ID;
      matchedSolution[i] = true;
      matchedAttempt[i] = true;
    }
  }

  // Second pass: Yellow letters
  for (int i = 0; i < WORD_LENGTH; i++) {
    if (matchedAttempt[i])
      continue; // already green

    bool found_yellow = false;
    for (int j = 0; j < WORD_LENGTH; j++) {
      if (!matchedSolution[j] && attempt[i] == solution[j]) {
        letter_color[attempt_counter][i] = YELLOW_ID;
        matchedSolution[j] = true;
        found_yellow = true;
        break;
      }
    }
    if (!found_yellow) {
      letter_color[attempt_counter][i] = GREY_ID;
    }
  }
  attempt = \"\";
  word_position = 0;
  if (attempt_counter + 1 == AMOUNT_OF_WORDS) {
    lost = true;
    return;
  }
  attempt_counter++;
  enteredWords[attempt_counter][word_position] = \"_\";
}

void handle_input() {
  // Display player input
  if (((current_key >= 'a' && current_key <= 'z') || current_key == 32) && word_position < WORD_LENGTH) {
    enteredWords[attempt_counter][word_position] =
        std::string(1, current_key - 32);
    current_key = 0; // reset key to not trigger spam
    word_position++;
    if (word_position < WORD_LENGTH) {
      enteredWords[attempt_counter][word_position] = '_';
    }
  }

  if (backspace_pressed) {
    backspace_pressed = false; // reset immediately
    if (word_position > 0) {
      if (word_position < WORD_LENGTH) {
        enteredWords[attempt_counter][word_position] = \"\";
      }
      word_position--;
      enteredWords[attempt_counter][word_position] = '_';
    }
  }

  if (enter_pressed) {
    enter_pressed = false;
    if (word_position == WORD_LENGTH) {
      try_guess();
    } else {
      invalid_length_msg = true;
    }
  }
  if (tab_pressed) {
    tab_pressed = false;
    show_menu = true;
  }
}

std::string get_solution() { return solution; }

void setup_game() {
  solution = random_word();

  enteredWords.resize(AMOUNT_OF_WORDS);

  for (std::vector<std::string> &row : enteredWords) {
    row.resize(WORD_LENGTH);
  }

  letter_color.resize(AMOUNT_OF_WORDS);
  for (std::vector<int> &row : letter_color) {
    row.resize(WORD_LENGTH);
  }

  // intialize the board with one space
  for (int i = 0; i < AMOUNT_OF_WORDS; i++) {
    for (int j = 0; j < WORD_LENGTH; j++) {
      enteredWords[i][j] = \" \";
    }
  }
}

int won_code = 1;
int lost_code = 2;

int check_game_over() {
  if (won) {
    clear_screen();
    print_board(enteredWords, won_code);
    std::cout << \"You won!\\n\";
    return 0;
  } else if (lost) {
    clear_screen();
    print_board(enteredWords, lost_code);
    std::cout << \"You lost! The answer was: \" << solution << \"\\n\";
    return 0;
  }
  return 69;
}

int update_game() {
  clear_screen();
  print_board(enteredWords, 0);
  handle_input();
  clear_screen();
  print_board(enteredWords, 0);

  return check_game_over();
}
" 0 1 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 1 8 (c-in-sws t face font-lock-preprocessor-face fontified t) 8 9 (c-in-sws t fontified t) 9 30 (c-in-sws t face font-lock-string-face fontified t) 30 31 (c-in-sws t fontified t) 31 32 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 32 39 (c-in-sws t face font-lock-preprocessor-face fontified t) 39 40 (c-in-sws t fontified t) 40 71 (c-in-sws t face font-lock-string-face fontified t) 71 72 (c-in-sws t fontified t) 72 73 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 73 80 (c-in-sws t face font-lock-preprocessor-face fontified t) 80 81 (c-in-sws t fontified t) 81 103 (c-in-sws t face font-lock-string-face fontified t) 103 104 (c-in-sws t fontified t) 104 105 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 105 112 (c-in-sws t face font-lock-preprocessor-face fontified t) 112 113 (c-in-sws t fontified t) 113 137 (c-in-sws t face font-lock-string-face fontified t) 137 138 (c-in-sws t fontified t) 138 139 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 139 146 (c-in-sws t face font-lock-preprocessor-face fontified t) 146 147 (c-in-sws t fontified t) 147 176 (c-in-sws t face font-lock-string-face fontified t) 176 177 (c-in-sws t fontified t) 177 178 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 178 185 (c-in-sws t face font-lock-preprocessor-face fontified t) 185 186 (c-in-sws t fontified t) 186 187 (c-in-sws t category c-<-as-paren-syntax face font-lock-string-face fontified t) 187 193 (c-in-sws t face font-lock-string-face fontified t) 193 194 (c-in-sws t category c->-as-paren-syntax face font-lock-string-face fontified t) 194 195 (c-in-sws t fontified t) 195 196 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 196 203 (c-in-sws t face font-lock-preprocessor-face fontified t) 203 204 (c-in-sws t fontified t) 204 205 (c-in-sws t category c-<-as-paren-syntax face font-lock-string-face fontified t) 205 213 (c-in-sws t face font-lock-string-face fontified t) 213 214 (c-in-sws t category c->-as-paren-syntax face font-lock-string-face fontified t) 214 215 (c-in-sws t fontified t) 215 216 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 216 223 (c-in-sws t face font-lock-preprocessor-face fontified t) 223 224 (c-in-sws t fontified t) 224 225 (c-in-sws t category c-<-as-paren-syntax face font-lock-string-face fontified t) 225 231 (c-in-sws t face font-lock-string-face fontified t) 231 232 (c-in-sws t category c->-as-paren-syntax face font-lock-string-face fontified t) 232 233 (c-in-sws t fontified t) 233 234 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 234 241 (c-in-sws t face font-lock-preprocessor-face fontified t) 241 242 (c-in-sws t fontified t) 242 243 (c-in-sws t category c-<-as-paren-syntax face font-lock-string-face fontified t) 243 251 (c-in-sws t face font-lock-string-face fontified t) 251 252 (c-in-sws t category c->-as-paren-syntax face font-lock-string-face fontified t) 252 253 (c-in-sws t fontified t) 253 256 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 256 267 (c-in-sws t face font-lock-comment-face fontified t) 267 268 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 268 275 (c-in-sws t face font-lock-preprocessor-face fontified t) 275 276 (c-in-sws t fontified t) 276 277 (c-in-sws t category c-<-as-paren-syntax face font-lock-string-face fontified t) 277 283 (c-in-sws t face font-lock-string-face fontified t) 283 284 (c-in-sws t category c->-as-paren-syntax face font-lock-string-face fontified t) 284 285 (c-in-sws t fontified t) 285 286 (c-in-sws t c-is-sws t face font-lock-comment-delimiter-face fontified t) 286 288 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 288 295 (c-in-sws t face font-lock-comment-face fontified t) 295 296 (c-in-sws t fontified t) 296 297 (face font-lock-type-face c-is-sws t fontified t) 297 298 (face font-lock-type-face fontified t) 298 299 (face font-lock-type-face c-type c-decl-id-start fontified t) 299 300 (fontified t) 300 311 (face font-lock-variable-name-face fontified t) 311 317 (fontified t) 317 319 (face font-lock-type-face fontified t) 319 320 (face font-lock-type-face c-type c-decl-id-start fontified t) 320 321 (fontified t) 321 336 (face font-lock-variable-name-face fontified t) 336 343 (fontified t) 343 346 (face font-lock-type-face fontified t) 346 347 (face font-lock-type-face c-type c-decl-id-start fontified t) 347 348 (fontified t) 348 359 (face font-lock-variable-name-face fontified t) 359 362 (fontified t) 362 365 (face font-lock-string-face fontified t) 365 368 (fontified t) 368 370 (face font-lock-type-face fontified t) 370 371 (face font-lock-type-face c-type c-decl-id-start fontified t) 371 372 (fontified t) 372 385 (face font-lock-variable-name-face fontified t) 385 391 (fontified t) 391 394 (face font-lock-type-face fontified t) 394 395 (face font-lock-type-face c-type c-decl-id-start fontified t) 395 396 (fontified t) 396 399 (face font-lock-variable-name-face fontified t) 399 402 (fontified t) 402 407 (face font-lock-constant-face fontified t) 407 409 (fontified t) 409 412 (face font-lock-type-face fontified t) 412 413 (face font-lock-type-face c-type c-decl-id-start fontified t) 413 414 (fontified t) 414 418 (face font-lock-variable-name-face fontified t) 418 421 (fontified t) 421 426 (face font-lock-constant-face fontified t) 426 429 (fontified t) 429 432 (face font-lock-constant-face fontified t) 432 434 (fontified t) 434 439 (face font-lock-type-face fontified t) 439 440 (face font-lock-type-face c-type c-decl-id-start fontified t) 440 441 (fontified t) 441 449 (face font-lock-variable-name-face fontified t) 449 451 (fontified t) 451 452 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 452 454 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 454 494 (c-in-sws t face font-lock-comment-face fontified t) 494 495 (c-is-sws t face font-lock-constant-face fontified t) 495 497 (face font-lock-constant-face fontified t) 497 499 (fontified t) 499 505 (face font-lock-type-face fontified t) 505 506 (fontified t category c-<-as-paren-syntax) 506 509 (face font-lock-constant-face fontified t) 509 511 (fontified t) 511 517 (face font-lock-type-face fontified t) 517 518 (fontified t category c-<-as-paren-syntax) 518 521 (face font-lock-constant-face fontified t) 521 523 (fontified t) 523 529 (face font-lock-type-face fontified t) 529 530 (fontified t category c->-as-paren-syntax) 530 531 (c-type c-decl-id-start fontified t category c->-as-paren-syntax) 531 532 (fontified t) 532 544 (face font-lock-variable-name-face fontified t) 544 547 (fontified t) 547 548 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 548 550 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 550 580 (c-in-sws t face font-lock-comment-face fontified t) 580 581 (c-is-sws t face font-lock-constant-face fontified t) 581 583 (face font-lock-constant-face fontified t) 583 585 (fontified t) 585 591 (face font-lock-type-face fontified t) 591 592 (fontified t category c-<-as-paren-syntax) 592 595 (face font-lock-constant-face fontified t) 595 597 (fontified t) 597 603 (face font-lock-type-face fontified t) 603 604 (fontified t category c-<-as-paren-syntax) 604 607 (face font-lock-type-face fontified t) 607 608 (fontified t category c->-as-paren-syntax) 608 609 (c-type c-decl-id-start fontified t category c->-as-paren-syntax) 609 610 (fontified t) 610 622 (face font-lock-variable-name-face fontified t) 622 625 (fontified t) 625 628 (face font-lock-constant-face fontified t) 628 630 (fontified t) 630 635 (face font-lock-type-face fontified t) 635 636 (face font-lock-type-face c-type c-decl-id-start fontified t) 636 637 (fontified t) 637 644 (face font-lock-variable-name-face fontified t) 644 647 (fontified t) 647 649 (face font-lock-string-face fontified t) 649 652 (fontified t) 652 653 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 653 655 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 655 680 (c-in-sws t face font-lock-comment-face fontified t) 680 681 (face font-lock-type-face c-is-sws t fontified t) 681 682 (face font-lock-type-face fontified t) 682 683 (face font-lock-type-face c-type c-decl-id-start fontified t) 683 684 (fontified t) 684 699 (face font-lock-variable-name-face fontified t) 699 706 (fontified t) 706 715 (face font-lock-keyword-face fontified t) 715 716 (fontified t) 716 718 (face font-lock-type-face fontified t) 718 719 (face font-lock-type-face c-type c-decl-id-start fontified t) 719 720 (fontified t) 720 728 (face font-lock-variable-name-face fontified t) 728 734 (fontified t) 734 743 (face font-lock-keyword-face fontified t) 743 744 (fontified t) 744 746 (face font-lock-type-face fontified t) 746 747 (face font-lock-type-face c-type c-decl-id-start fontified t) 747 748 (fontified t) 748 757 (face font-lock-variable-name-face fontified t) 757 763 (fontified t) 763 772 (face font-lock-keyword-face fontified t) 772 773 (fontified t) 773 775 (face font-lock-type-face fontified t) 775 776 (face font-lock-type-face c-type c-decl-id-start fontified t) 776 777 (fontified t) 777 784 (face font-lock-variable-name-face fontified t) 784 791 (fontified t) 791 794 (face font-lock-type-face fontified t) 794 795 (face font-lock-type-face c-type c-decl-id-start fontified t) 795 796 (fontified t) 796 812 (face font-lock-variable-name-face fontified t) 812 815 (fontified t) 815 820 (face font-lock-constant-face fontified t) 820 822 (fontified t) 822 825 (face font-lock-type-face fontified t) 825 826 (face font-lock-type-face c-type c-decl-id-start fontified t) 826 827 (fontified t) 827 845 (face font-lock-variable-name-face fontified t) 845 848 (fontified t) 848 853 (face font-lock-constant-face fontified t) 853 855 (fontified t) 855 858 (face font-lock-type-face fontified t) 858 859 (face font-lock-type-face c-type c-decl-id-start fontified t) 859 860 (fontified t) 860 869 (face font-lock-variable-name-face fontified t) 869 872 (fontified t) 872 877 (face font-lock-constant-face fontified t) 877 880 (fontified t) 880 883 (face font-lock-type-face fontified t) 883 884 (face font-lock-type-face c-type c-decl-id-start fontified t) 884 885 (fontified t) 885 894 (face font-lock-function-name-face fontified t) 894 899 (fontified t) 899 901 (c-is-sws t c-in-sws t fontified t) 901 902 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 902 903 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 903 904 (c-in-sws t face font-lock-comment-face fontified t) 904 906 (c-in-sws t c-is-sws t fontified t) 906 907 (c-is-sws t face font-lock-keyword-face fontified t) 907 909 (face font-lock-keyword-face fontified t) 909 911 (fontified t) 911 913 (face font-lock-type-face fontified t) 913 914 (face font-lock-type-face c-type c-decl-id-start fontified t) 914 915 (fontified t) 915 916 (face font-lock-variable-name-face fontified t) 916 950 (fontified t) 950 952 (face font-lock-keyword-face fontified t) 952 954 (fontified t) 954 955 (face font-lock-negation-char-face fontified t) 955 1016 (fontified t) 1016 1019 (face font-lock-constant-face fontified t) 1019 1073 (fontified t) 1073 1077 (face font-lock-keyword-face fontified t) 1077 1110 (fontified t) 1110 1113 (face font-lock-comment-delimiter-face fontified t) 1113 1135 (face font-lock-comment-face fontified t) 1135 1147 (fontified t) 1147 1149 (face font-lock-keyword-face fontified t) 1149 1175 (fontified t) 1175 1177 (face font-lock-keyword-face fontified t) 1177 1244 (fontified t) 1244 1248 (face font-lock-constant-face fontified t) 1248 1266 (fontified t) 1266 1268 (face font-lock-string-face fontified t) 1268 1276 (fontified t) 1276 1282 (face font-lock-keyword-face fontified t) 1282 1295 (fontified t) 1295 1299 (face font-lock-keyword-face fontified t) 1299 1300 (fontified t) 1300 1302 (face font-lock-keyword-face fontified t) 1302 1328 (fontified t) 1328 1330 (face font-lock-keyword-face fontified t) 1330 1397 (fontified t) 1397 1401 (face font-lock-constant-face fontified t) 1401 1419 (fontified t) 1419 1421 (face font-lock-string-face fontified t) 1421 1429 (fontified t) 1429 1435 (face font-lock-keyword-face fontified t) 1435 1447 (fontified t) 1447 1451 (face font-lock-keyword-face fontified t) 1451 1452 (fontified t) 1452 1454 (face font-lock-keyword-face fontified t) 1454 1476 (fontified t) 1476 1480 (fontified t) 1480 1482 (face font-lock-keyword-face fontified t) 1482 1500 (fontified t) 1500 1518 (fontified t) 1518 1549 (fontified t) 1549 1553 (face font-lock-constant-face fontified t) 1553 1571 (fontified t) 1571 1573 (face font-lock-string-face fontified t) 1573 1581 (fontified t) 1581 1587 (face font-lock-keyword-face fontified t) 1587 1601 (fontified t) 1601 1603 (face font-lock-keyword-face fontified t) 1603 1638 (fontified t) 1638 1642 (face font-lock-constant-face fontified t) 1642 1648 (fontified t) 1648 1650 (c-is-sws t c-in-sws t fontified t) 1650 1651 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 1651 1653 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 1653 1677 (c-in-sws t face font-lock-comment-face fontified t) 1677 1679 (c-in-sws t c-is-sws t fontified t) 1679 1680 (c-is-sws t face font-lock-constant-face fontified t) 1680 1682 (face font-lock-constant-face fontified t) 1682 1684 (fontified t) 1684 1690 (face font-lock-type-face fontified t) 1690 1691 (fontified t category c-<-as-paren-syntax) 1691 1695 (face font-lock-type-face fontified t) 1695 1696 (c-type c-decl-id-start fontified t category c->-as-paren-syntax) 1696 1697 (fontified t) 1697 1712 (face font-lock-variable-name-face fontified t) 1712 1715 (fontified t) 1715 1716 (c-type c-not-decl fontified t) 1716 1721 (face font-lock-constant-face fontified t) 1721 1726 (fontified t) 1726 1729 (face font-lock-constant-face fontified t) 1729 1731 (fontified t) 1731 1737 (face font-lock-type-face fontified t) 1737 1738 (fontified t category c-<-as-paren-syntax) 1738 1742 (face font-lock-type-face fontified t) 1742 1743 (c-type c-decl-id-start fontified t category c->-as-paren-syntax) 1743 1744 (fontified t) 1744 1758 (face font-lock-variable-name-face fontified t) 1758 1761 (fontified t) 1761 1762 (c-type c-not-decl fontified t) 1762 1767 (face font-lock-constant-face fontified t) 1767 1848 (fontified t) 1848 1850 (c-is-sws t c-in-sws t fontified t) 1850 1851 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 1851 1853 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 1853 1879 (c-in-sws t face font-lock-comment-face fontified t) 1879 1881 (c-in-sws t c-is-sws t fontified t) 1881 1882 (c-is-sws t face font-lock-keyword-face fontified t) 1882 1884 (face font-lock-keyword-face fontified t) 1884 1886 (fontified t) 1886 1888 (face font-lock-type-face fontified t) 1888 1889 (face font-lock-type-face c-type c-decl-id-start fontified t) 1889 1890 (fontified t) 1890 1891 (face font-lock-variable-name-face fontified t) 1891 1925 (fontified t) 1925 1927 (face font-lock-keyword-face fontified t) 1927 2036 (fontified t) 2036 2040 (face font-lock-constant-face fontified t) 2040 2068 (fontified t) 2068 2072 (face font-lock-constant-face fontified t) 2072 2087 (fontified t) 2087 2090 (face font-lock-comment-delimiter-face fontified t) 2090 2118 (face font-lock-comment-face fontified t) 2118 2120 (fontified t) 2120 2123 (face font-lock-keyword-face fontified t) 2123 2125 (fontified t) 2125 2127 (face font-lock-type-face fontified t) 2127 2128 (face font-lock-type-face c-type c-decl-id-start fontified t) 2128 2129 (fontified t) 2129 2130 (face font-lock-variable-name-face fontified t) 2130 2164 (fontified t) 2164 2166 (face font-lock-keyword-face fontified t) 2166 2193 (fontified t) 2193 2201 (face font-lock-keyword-face fontified t) 2201 2202 (fontified t) 2202 2203 (c-is-sws t c-in-sws t fontified t) 2203 2204 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 2204 2206 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 2206 2220 (c-in-sws t face font-lock-comment-face fontified t) 2220 2221 (c-in-sws t fontified t) 2221 2225 (c-in-sws t c-is-sws t fontified t) 2225 2226 (face font-lock-type-face c-is-sws t fontified t) 2226 2228 (face font-lock-type-face fontified t) 2228 2229 (face font-lock-type-face c-type c-decl-id-start fontified t) 2229 2230 (fontified t) 2230 2242 (face font-lock-variable-name-face fontified t) 2242 2245 (fontified t) 2245 2250 (face font-lock-constant-face fontified t) 2250 2256 (fontified t) 2256 2259 (face font-lock-keyword-face fontified t) 2259 2261 (fontified t) 2261 2263 (face font-lock-type-face fontified t) 2263 2264 (face font-lock-type-face c-type c-decl-id-start fontified t) 2264 2265 (fontified t) 2265 2266 (face font-lock-variable-name-face fontified t) 2266 2302 (fontified t) 2302 2304 (face font-lock-keyword-face fontified t) 2304 2306 (fontified t) 2306 2307 (face font-lock-negation-char-face fontified t) 2307 2441 (fontified t) 2441 2445 (face font-lock-constant-face fontified t) 2445 2470 (fontified t) 2470 2474 (face font-lock-constant-face fontified t) 2474 2484 (fontified t) 2484 2489 (face font-lock-keyword-face fontified t) 2489 2509 (fontified t) 2509 2511 (face font-lock-keyword-face fontified t) 2511 2513 (fontified t) 2513 2514 (face font-lock-negation-char-face fontified t) 2514 2602 (fontified t) 2602 2604 (face font-lock-string-face fontified t) 2604 2629 (fontified t) 2629 2631 (face font-lock-keyword-face fontified t) 2631 2686 (fontified t) 2686 2690 (face font-lock-constant-face fontified t) 2690 2696 (fontified t) 2696 2702 (face font-lock-keyword-face fontified t) 2702 2778 (fontified t) 2778 2781 (face font-lock-string-face fontified t) 2781 2786 (fontified t) 2786 2789 (face font-lock-type-face fontified t) 2789 2790 (face font-lock-type-face c-type c-decl-id-start fontified t) 2790 2791 (fontified t) 2791 2803 (face font-lock-function-name-face fontified t) 2803 2808 (fontified t) 2808 2810 (c-is-sws t c-in-sws t fontified t) 2810 2811 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 2811 2813 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 2813 2833 (c-in-sws t face font-lock-comment-face fontified t) 2833 2834 (c-in-sws t face font-lock-comment-face fontified t) 2834 2836 (c-in-sws t c-is-sws t fontified t) 2836 2837 (face font-lock-keyword-face c-is-sws t fontified t) 2837 2838 (face font-lock-keyword-face fontified t) 2838 2840 (fontified t) 2840 2841 (fontified t) 2841 2842 (fontified t) 2842 2856 (fontified t) 2856 2857 (fontified t) 2857 2860 (face font-lock-string-face fontified t) 2860 2879 (fontified t) 2879 2882 (face font-lock-string-face fontified t) 2882 2883 (fontified t) 2883 2884 (fontified t) 2884 2885 (fontified t) 2885 2886 (fontified t) 2886 2887 (fontified t) 2887 2898 (fontified t) 2898 2899 (fontified t) 2899 2900 (fontified t) 2900 2901 (fontified t) 2901 2902 (fontified t) 2902 2903 (fontified t) 2903 2904 (fontified t) 2904 2905 (fontified t) 2905 2939 (fontified t) 2939 2940 (fontified t) 2940 2999 (fontified t) 2999 3002 (face font-lock-constant-face fontified t) 3002 3033 (fontified t) 3033 3043 (fontified t) 3043 3050 (fontified t) 3050 3053 (fontified t) 3053 3054 (fontified t c-is-sws t c-in-sws t) 3054 3055 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 3055 3057 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 3057 3087 (face font-lock-comment-face fontified t c-in-sws t) 3087 3091 (fontified t c-in-sws t c-is-sws t) 3091 3092 (fontified t c-is-sws t) 3092 3112 (fontified t) 3112 3114 (face font-lock-keyword-face fontified t) 3114 3200 (fontified t) 3200 3203 (face font-lock-string-face fontified t) 3203 3218 (fontified t) 3218 3220 (face font-lock-keyword-face fontified t) 3220 3267 (fontified t) 3267 3272 (face font-lock-constant-face fontified t) 3272 3273 (fontified t) 3273 3274 (fontified t c-is-sws t c-in-sws t) 3274 3275 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 3275 3277 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 3277 3295 (face font-lock-comment-face fontified t c-in-sws t) 3295 3299 (fontified t c-in-sws t c-is-sws t) 3299 3300 (face font-lock-keyword-face fontified t c-is-sws t) 3300 3301 (face font-lock-keyword-face fontified t) 3301 3330 (fontified t) 3330 3332 (face font-lock-keyword-face fontified t) 3332 3420 (fontified t) 3420 3422 (face font-lock-string-face fontified t) 3422 3508 (fontified t) 3508 3511 (face font-lock-string-face fontified t) 3511 3526 (fontified t) 3526 3528 (face font-lock-keyword-face fontified t) 3528 3567 (fontified t) 3567 3572 (face font-lock-constant-face fontified t) 3572 3578 (fontified t) 3578 3580 (face font-lock-keyword-face fontified t) 3580 3639 (fontified t) 3639 3643 (face font-lock-keyword-face fontified t) 3643 3673 (fontified t) 3673 3677 (face font-lock-constant-face fontified t) 3677 3691 (fontified t) 3691 3693 (face font-lock-keyword-face fontified t) 3693 3728 (fontified t) 3728 3733 (face font-lock-constant-face fontified t) 3733 3751 (fontified t) 3751 3755 (face font-lock-constant-face fontified t) 3755 3764 (fontified t) 3764 3767 (face font-lock-constant-face fontified t) 3767 3769 (fontified t) 3769 3774 (face font-lock-type-face fontified t) 3774 3775 (face font-lock-type-face c-type c-decl-id-start fontified t) 3775 3776 (fontified t) 3776 3788 (face font-lock-function-name-face fontified t) 3788 3793 (fontified t) 3793 3799 (face font-lock-keyword-face fontified t) 3799 3813 (fontified t) 3813 3816 (face font-lock-type-face fontified t) 3816 3817 (face font-lock-type-face c-type c-decl-id-start fontified t) 3817 3818 (fontified t) 3818 3828 (face font-lock-function-name-face fontified t) 3828 3905 (fontified t) 3905 3908 (face font-lock-keyword-face fontified t) 3908 3910 (fontified t) 3910 3913 (face font-lock-constant-face fontified t) 3913 3915 (fontified t) 3915 3921 (face font-lock-type-face fontified t) 3921 3922 (fontified t category c-<-as-paren-syntax) 3922 3925 (face font-lock-constant-face fontified t) 3925 3927 (fontified t) 3927 3933 (face font-lock-type-face fontified t) 3933 3934 (c-type c-decl-id-start fontified t category c->-as-paren-syntax) 3934 3936 (fontified t) 3936 3939 (face font-lock-variable-name-face fontified t) 3939 4034 (fontified t) 4034 4037 (face font-lock-keyword-face fontified t) 4037 4039 (fontified t) 4039 4042 (face font-lock-constant-face fontified t) 4042 4044 (fontified t) 4044 4050 (face font-lock-type-face fontified t) 4050 4051 (fontified t category c-<-as-paren-syntax) 4051 4054 (face font-lock-type-face fontified t) 4054 4055 (c-type c-decl-id-start fontified t category c->-as-paren-syntax) 4055 4057 (fontified t) 4057 4060 (face font-lock-variable-name-face fontified t) 4060 4113 (fontified t) 4113 4115 (fontified t c-is-sws t c-in-sws t) 4115 4116 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 4116 4118 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 4118 4153 (face font-lock-comment-face fontified t c-in-sws t) 4153 4155 (fontified t c-in-sws t c-is-sws t) 4155 4156 (face font-lock-keyword-face fontified t c-is-sws t) 4156 4158 (face font-lock-keyword-face fontified t) 4158 4160 (fontified t) 4160 4162 (face font-lock-type-face fontified t) 4162 4163 (face font-lock-type-face c-type c-decl-id-start fontified t) 4163 4164 (fontified t) 4164 4165 (face font-lock-variable-name-face fontified t) 4165 4203 (fontified t) 4203 4206 (face font-lock-keyword-face fontified t) 4206 4208 (fontified t) 4208 4210 (face font-lock-type-face fontified t) 4210 4211 (face font-lock-type-face c-type c-decl-id-start fontified t) 4211 4212 (fontified t) 4212 4213 (face font-lock-variable-name-face fontified t) 4213 4270 (fontified t) 4270 4273 (face font-lock-string-face fontified t) 4273 4288 (fontified t) 4288 4290 (face font-lock-type-face fontified t) 4290 4291 (face font-lock-type-face c-type c-decl-id-start fontified t) 4291 4292 (fontified t) 4292 4300 (face font-lock-variable-name-face fontified t) 4300 4306 (fontified t) 4306 4308 (face font-lock-type-face fontified t) 4308 4309 (face font-lock-type-face c-type c-decl-id-start fontified t) 4309 4310 (fontified t) 4310 4319 (face font-lock-variable-name-face fontified t) 4319 4326 (fontified t) 4326 4328 (face font-lock-type-face fontified t) 4328 4329 (face font-lock-type-face c-type c-decl-id-start fontified t) 4329 4330 (fontified t) 4330 4345 (face font-lock-function-name-face fontified t) 4345 4352 (fontified t) 4352 4354 (face font-lock-keyword-face fontified t) 4354 4356 (fontified t) 4356 4363 (fontified t) 4428 4431 (face font-lock-constant-face) 4441 4453 (face font-lock-string-face) 4459 4465 (face font-lock-keyword-face) 4473 4477 (face font-lock-keyword-face) 4478 4480 (face font-lock-keyword-face) 4556 4559 (face font-lock-constant-face) 4569 4597 (face font-lock-string-face) 4613 4617 (face font-lock-string-face) 4623 4629 (face font-lock-keyword-face) 4639 4645 (face font-lock-keyword-face) 4653 4655 (face font-lock-type-face) 4655 4656 (face font-lock-type-face c-type c-decl-id-start) 4657 4668 (face font-lock-function-name-face) 4794 4800 (face font-lock-keyword-face)) . 1) (undo-tree-id54 . -30) (undo-tree-id55 . -3300) (undo-tree-id56 . -3902) (undo-tree-id57 . -3902) (undo-tree-id58 . -3902) (undo-tree-id59 . -3902) (undo-tree-id60 . -4725) (undo-tree-id61 . -2704) (undo-tree-id62 . -2887) (undo-tree-id63 . -4725) (undo-tree-id64 . -3300) (undo-tree-id65 . 1980) (undo-tree-id66 . -2887) (undo-tree-id67 . -2887) (undo-tree-id68 . 1917) (undo-tree-id69 . -2900) (undo-tree-id70 . -2900) (undo-tree-id71 . -2900) (undo-tree-id72 . -2900) (undo-tree-id73 . -2900) (undo-tree-id74 . -2900) (undo-tree-id75 . -2900) (undo-tree-id76 . -2900) (undo-tree-id77 . -2841) (undo-tree-id78 . -2841) (undo-tree-id79 . -2841) (undo-tree-id80 . -2841) (undo-tree-id81 . -2841) (undo-tree-id82 . -2841) (undo-tree-id83 . -2841) (undo-tree-id84 . -2841) (undo-tree-id85 . -2834) (undo-tree-id86 . -2856) (undo-tree-id87 . -2842) (undo-tree-id88 . -2842) (undo-tree-id89 . -2842) (undo-tree-id90 . -2842) (undo-tree-id91 . -2842) (undo-tree-id92 . -2841) (undo-tree-id93 . -2841) (undo-tree-id94 . -2834) (undo-tree-id95 . -2841) (undo-tree-id96 . -2841) (undo-tree-id97 . -2841) (undo-tree-id98 . -2841) (undo-tree-id99 . -2841) (undo-tree-id100 . -2841) (undo-tree-id101 . -2841) (undo-tree-id102 . -2841) (undo-tree-id103 . -2841) (undo-tree-id104 . -2841) (undo-tree-id105 . -2841) (undo-tree-id106 . -2704) (undo-tree-id107 . -2704) (undo-tree-id108 . -2841) (undo-tree-id109 . -2841)) ((1 . 4823) (#("#include \"../include/game.hpp\"
#include \"../include/terminal_input.hpp\"
#include \"../include/utils.hpp\"
#include \"../include/visuals.hpp\"
#include \"../include/word_machine.hpp\"
#include <cctype>
#include <iostream>
#include <string>
#include <unistd.h> // For usleep
#include <vector>
// WORDLE

int WORD_LENGTH = 5;
int AMOUNT_OF_WORDS = 6;

char cursor_char = '_';

int word_position = 0;
bool won = false;
bool lost = false;

std::string solution;
// Stores the letters which get visualized
std::vector<std::vector<std::string>> enteredWords;

// Array needed for colorization
std::vector<std::vector<int>> letter_color;

std::string attempt = \"\";

// Dictates the current row
int attempt_counter = 0;

constexpr int GREEN_ID = 1;
constexpr int YELLOW_ID = 2;
constexpr int GREY_ID = 3;

bool invalid_word_msg = false;
bool invalid_length_msg = false;
bool show_menu = false;

void try_guess() {
  //
  for (int i = 0; i < WORD_LENGTH; i++) {
    if (!enteredWords[attempt_counter][i].empty()) {
      attempt += std::tolower(enteredWords[attempt_counter][i][0]);
    } else {
      attempt += cursor_char; // or some sentinel char
    }
  }
  if (WORD_LENGTH == 5) {
    if (acceptableWords5.count(attempt) == 0) {
      invalid_word_msg = true;
      attempt = \"\";
      return;
    }

  } else if (WORD_LENGTH == 6) {
    if (acceptableWords6.count(attempt) == 0) {
      invalid_word_msg = true;
      attempt = \"\";
      return;
    }
  } else if (WORD_LENGTH == 7) {
    if (acceptableWords7.count(attempt) == 0) {
      invalid_word_msg = true;
      attempt = \"\";
      return;
    }
  }
  if (attempt == solution) {
    won = true;
  }
  // Track matched positions
  std::vector<bool> matchedSolution = {false};
  std::vector<bool> matchedAttempt = {false};
  matchedSolution.resize(WORD_LENGTH);
  matchedAttempt.resize(WORD_LENGTH);

  // First pass: Green letters
  for (int i = 0; i < WORD_LENGTH; i++) {
    if (attempt[i] == solution[i]) {
      letter_color[attempt_counter][i] = GREEN_ID;
      matchedSolution[i] = true;
      matchedAttempt[i] = true;
    }
  }

  // Second pass: Yellow letters
  for (int i = 0; i < WORD_LENGTH; i++) {
    if (matchedAttempt[i])
      continue; // already green

    bool found_yellow = false;
    for (int j = 0; j < WORD_LENGTH; j++) {
      if (!matchedSolution[j] && attempt[i] == solution[j]) {
        letter_color[attempt_counter][i] = YELLOW_ID;
        matchedSolution[j] = true;
        found_yellow = true;
        break;
      }
    }
    if (!found_yellow) {
      letter_color[attempt_counter][i] = GREY_ID;
    }
  }
  attempt = \"\";
  word_position = 0;
  if (attempt_counter + 1 == AMOUNT_OF_WORDS) {
    lost = true;
    return;
  }
  attempt_counter++;
  enteredWords[attempt_counter][word_position] = \"_\";
}

void handle_input() {
  // Display player input
  if (((current_key >= 'a' && current_key <= 'z') || current_key == 32) &&
      word_position < WORD_LENGTH) {
    enteredWords[attempt_counter][word_position] =
        std::string(1, current_key - 32);
    current_key = 0; // reset key to not trigger spam
    word_position++;
    if (word_position < WORD_LENGTH) {
      enteredWords[attempt_counter][word_position] = '_';
    }
  }

  if (backspace_pressed) {
    backspace_pressed = false; // reset immediately
    if (word_position > 0) {
      if (word_position < WORD_LENGTH) {
        enteredWords[attempt_counter][word_position] = \"\";
      }
      word_position--;
      enteredWords[attempt_counter][word_position] = '_';
    }
  }

  if (enter_pressed) {
    enter_pressed = false;
    if (word_position == WORD_LENGTH) {
      try_guess();
    } else {
      invalid_length_msg = true;
    }
  }
  if (tab_pressed) {
    tab_pressed = false;
    show_menu = true;
  }
}

std::string get_solution() { return solution; }

void setup_game() {
  solution = random_word();

  enteredWords.resize(AMOUNT_OF_WORDS);

  for (std::vector<std::string> &row : enteredWords) {
    row.resize(WORD_LENGTH);
  }

  letter_color.resize(AMOUNT_OF_WORDS);
  for (std::vector<int> &row : letter_color) {
    row.resize(WORD_LENGTH);
  }

  // intialize the board with one space
  for (int i = 0; i < AMOUNT_OF_WORDS; i++) {
    for (int j = 0; j < WORD_LENGTH; j++) {
      enteredWords[i][j] = \" \";
    }
  }
}

int won_code = 1;
int lost_code = 2;

int check_game_over() {
  if (won) {
    clear_screen();
    print_board(enteredWords, won_code);
    std::cout << \"You won!\\n\";
    return 0;
  } else if (lost) {
    clear_screen();
    print_board(enteredWords, lost_code);
    std::cout << \"You lost! The answer was: \" << solution << \"\\n\";
    return 0;
  }
  return 69;
}

int update_game() {
  clear_screen();
  print_board(enteredWords, 0);
  handle_input();
  clear_screen();
  print_board(enteredWords, 0);

  return check_game_over();
}
" 505 506 (category c-<-as-paren-syntax) 517 518 (category c-<-as-paren-syntax) 529 530 (category c->-as-paren-syntax) 530 531 (category c->-as-paren-syntax) 591 592 (category c-<-as-paren-syntax) 603 604 (category c-<-as-paren-syntax) 607 608 (category c->-as-paren-syntax) 608 609 (category c->-as-paren-syntax) 1690 1691 (category c-<-as-paren-syntax) 1695 1696 (category c->-as-paren-syntax) 1737 1738 (category c-<-as-paren-syntax) 1742 1743 (category c->-as-paren-syntax) 2704 2778 (fontified t) 2778 2781 (face font-lock-string-face fontified t) 2781 2786 (fontified t) 2786 2789 (face font-lock-type-face fontified t) 2789 2790 (face font-lock-type-face c-type c-decl-id-start fontified t) 2790 2791 (fontified t) 2791 2803 (face font-lock-function-name-face fontified t) 2803 2810 (fontified t) 2810 2811 (face font-lock-comment-delimiter-face fontified t c-in-sws t c-is-sws t) 2811 2813 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 2813 2834 (face font-lock-comment-face fontified t c-in-sws t) 2834 2836 (fontified t c-in-sws t) 2836 2837 (face font-lock-keyword-face fontified t c-is-sws t) 2837 2838 (face font-lock-keyword-face fontified t) 2838 2857 (fontified t) 2857 2860 (face font-lock-string-face fontified t) 2860 2879 (fontified t) 2879 2882 (face font-lock-string-face fontified t) 2882 3005 (fontified t) 3005 3008 (face font-lock-constant-face fontified t) 3008 3059 (fontified t) 3059 3060 (fontified t c-is-sws t c-in-sws t) 3060 3061 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 3061 3063 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 3063 3093 (face font-lock-comment-face fontified t c-in-sws t) 3093 3097 (fontified t c-in-sws t c-is-sws t) 3097 3098 (fontified t c-is-sws t) 3098 3118 (fontified t) 3118 3120 (face font-lock-keyword-face fontified t) 3120 3206 (fontified t) 3206 3209 (face font-lock-string-face fontified t) 3209 3224 (fontified t) 3224 3226 (face font-lock-keyword-face fontified t) 3226 3273 (fontified t) 3273 3278 (face font-lock-constant-face fontified t) 3278 3279 (fontified t) 3279 3280 (fontified t c-is-sws t c-in-sws t) 3280 3281 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 3281 3283 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 3283 3301 (face font-lock-comment-face fontified t c-in-sws t) 3301 3305 (fontified t c-in-sws t c-is-sws t) 3305 3306 (face font-lock-keyword-face fontified t c-is-sws t) 3306 3307 (face font-lock-keyword-face fontified t) 3307 3336 (fontified t) 3336 3338 (face font-lock-keyword-face fontified t) 3338 3426 (fontified t) 3426 3428 (face font-lock-string-face fontified t) 3428 3514 (fontified t) 3514 3517 (face font-lock-string-face fontified t) 3517 3532 (fontified t) 3532 3534 (face font-lock-keyword-face fontified t) 3534 3573 (fontified t) 3573 3578 (face font-lock-constant-face fontified t) 3578 3584 (fontified t) 3584 3586 (face font-lock-keyword-face fontified t) 3586 3645 (fontified t) 3645 3649 (face font-lock-keyword-face fontified t) 3649 3679 (fontified t) 3679 3683 (face font-lock-constant-face fontified t) 3683 3697 (fontified t) 3697 3699 (face font-lock-keyword-face fontified t) 3699 3734 (fontified t) 3734 3739 (face font-lock-constant-face fontified t) 3739 3757 (fontified t) 3757 3761 (face font-lock-constant-face fontified t) 3761 3770 (fontified t) 3770 3773 (face font-lock-constant-face fontified t) 3773 3775 (fontified t) 3775 3780 (face font-lock-type-face fontified t) 3780 3781 (face font-lock-type-face c-type c-decl-id-start fontified t) 3781 3782 (fontified t) 3782 3794 (face font-lock-function-name-face fontified t) 3794 3799 (fontified t) 3799 3805 (face font-lock-keyword-face fontified t) 3805 3819 (fontified t) 3819 3822 (face font-lock-type-face fontified t) 3822 3823 (face font-lock-type-face c-type c-decl-id-start fontified t) 3823 3824 (fontified t) 3824 3834 (face font-lock-function-name-face fontified t) 3834 3911 (fontified t) 3911 3914 (face font-lock-keyword-face fontified t) 3914 3916 (fontified t) 3916 3919 (face font-lock-constant-face fontified t) 3919 3921 (fontified t) 3921 3927 (face font-lock-type-face fontified t) 3927 3928 (fontified t category c-<-as-paren-syntax) 3928 3931 (face font-lock-constant-face fontified t) 3931 3933 (fontified t) 3933 3939 (face font-lock-type-face fontified t) 3939 3940 (c-type c-decl-id-start fontified t category c->-as-paren-syntax) 3940 3942 (fontified t) 3942 3945 (face font-lock-variable-name-face fontified t) 3945 4040 (fontified t) 4040 4043 (face font-lock-keyword-face fontified t) 4043 4045 (fontified t) 4045 4048 (face font-lock-constant-face fontified t) 4048 4050 (fontified t) 4050 4056 (face font-lock-type-face fontified t) 4056 4057 (fontified t category c-<-as-paren-syntax) 4057 4060 (face font-lock-type-face fontified t) 4060 4061 (c-type c-decl-id-start fontified t category c->-as-paren-syntax) 4061 4063 (fontified t) 4063 4066 (face font-lock-variable-name-face fontified t) 4066 4121 (fontified t) 4121 4124 (face font-lock-comment-delimiter-face fontified t) 4124 4159 (face font-lock-comment-face fontified t) 4159 4161 (fontified t) 4161 4164 (face font-lock-keyword-face fontified t) 4164 4166 (fontified t) 4166 4168 (face font-lock-type-face fontified t) 4168 4169 (face font-lock-type-face c-type c-decl-id-start fontified t) 4169 4170 (fontified t) 4170 4171 (face font-lock-variable-name-face fontified t) 4171 4204 (fontified t) 4204 4205 (fontified t)) . 1) (undo-tree-id136 . -30) (undo-tree-id137 . -3300) (undo-tree-id138 . -2841) (undo-tree-id139 . -2841) (undo-tree-id140 . -2704) (undo-tree-id141 . -4725) (undo-tree-id142 . -3902) (undo-tree-id143 . -3902) (undo-tree-id144 . -2704) (undo-tree-id145 . -2885) (undo-tree-id146 . -2885) (undo-tree-id147 . -2841) (undo-tree-id148 . -2841) (undo-tree-id149 . -2841) (undo-tree-id150 . -2841) (undo-tree-id151 . -2841) (undo-tree-id152 . -2841) (undo-tree-id153 . -2841) (undo-tree-id154 . -2841) (undo-tree-id155 . -2841) (undo-tree-id156 . -2841) (undo-tree-id157 . -2841) (undo-tree-id158 . -2841) (undo-tree-id159 . -2841) (undo-tree-id160 . -2841) (undo-tree-id161 . -2841) (undo-tree-id162 . -2841) (undo-tree-id163 . -2841) (undo-tree-id164 . -2841) (undo-tree-id165 . -2841) (undo-tree-id166 . -2841) (undo-tree-id167 . -2842) (undo-tree-id168 . -2843) (undo-tree-id169 . -2844) (undo-tree-id170 . -2845) (undo-tree-id171 . -2846) (undo-tree-id172 . -2847) (undo-tree-id173 . -2848) (undo-tree-id174 . -2849) (undo-tree-id175 . -2850) (undo-tree-id176 . -2851) (undo-tree-id177 . -2852) (undo-tree-id178 . -2853) (undo-tree-id179 . -2854) (undo-tree-id180 . -2855) (undo-tree-id181 . -2856) (undo-tree-id182 . -2857) (undo-tree-id183 . -2858) (undo-tree-id184 . -2859) (undo-tree-id185 . -2860) (undo-tree-id186 . -2861) (undo-tree-id187 . -2862) (undo-tree-id188 . -2863) (undo-tree-id189 . -2864) (undo-tree-id190 . -2865) (undo-tree-id191 . -2866) (undo-tree-id192 . -2867) (undo-tree-id193 . -2868) (undo-tree-id194 . -2869) (undo-tree-id195 . -2870) (undo-tree-id196 . -2871) (undo-tree-id197 . -2872) (undo-tree-id198 . -2873) (undo-tree-id199 . -2874) (undo-tree-id200 . -2875) (undo-tree-id201 . -2876) (undo-tree-id202 . -2877) (undo-tree-id203 . -2878) (undo-tree-id204 . -2879) (undo-tree-id205 . -2880) (undo-tree-id206 . -2881) (undo-tree-id207 . -2882) (undo-tree-id208 . -2883) (undo-tree-id209 . -2884) (undo-tree-id210 . -2885) (undo-tree-id211 . -2886) (undo-tree-id212 . -2886) (undo-tree-id213 . -2886) (undo-tree-id214 . -2886) (undo-tree-id215 . -2886) (undo-tree-id216 . -2886) (undo-tree-id217 . -2886) (undo-tree-id218 . -2834) (undo-tree-id219 . -2885) (undo-tree-id220 . -2885) (undo-tree-id221 . -2885) (undo-tree-id222 . -2885) (undo-tree-id223 . -2885) (undo-tree-id224 . -2885) (undo-tree-id225 . -2885) (undo-tree-id226 . -2885) (t 26692 29193 831977 171000)) (26692 29193 831650 459000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3927 . 3928) (#("
" 0 1 (fontified nil)) . -3948) (3923 . 3949)) nil (26692 29742 536279 133000) 0 nil])
nil
([nil nil ((#("    show_menu = true;
" 0 16 (fontified t) 16 20 (face font-lock-constant-face fontified t) 20 21 (fontified t) 21 22 (fontified t)) . 3957) (undo-tree-id461 . -4) (undo-tree-id462 . -4) 3961) nil (26692 29742 536278 783000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3952 . 3953) (#("
" 0 1 (fontified nil)) . -3970) (3948 . 3971) 3926) nil (26692 29742 536278 131000) 0 nil])
([nil nil ((3965 . 3970) (#("true" 0 4 (face font-lock-constant-face fontified t)) . 3965)) nil (26692 29742 536277 801000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 3923)) nil (26692 29742 536277 567000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3982 . 3983) (#("
" 0 1 (fontified nil)) . -4061) (3978 . 4062) 3971) nil (26692 29742 536277 287000) 0 nil])
([nil nil ((#(" x" 0 2 (fontified nil)) . -3987) (3987 . 3989) (#("else" 0 4 (face font-lock-keyword-face fontified nil)) . 3987) (undo-tree-id455 . -4) (undo-tree-id456 . -4) (3983 . 3987) 3988 (3987 . 3988) (#(" x" 0 2 (fontified nil)) . -3987) (3987 . 3989) (#("else" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 3987) (undo-tree-id457 . -4) (undo-tree-id458 . -4) (undo-tree-id459 . -4) (undo-tree-id460 . -4) (3983 . 3987) 3987 (3983 . 3987)) nil (26692 29742 536276 644000) 0 nil])
([nil nil ((3992 . 3993)) nil (26692 29742 536274 529000) 0 nil])
([nil nil ((4053 . 4057) (#("i" 0 1 (fontified t)) . -4053) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) 4054 (4053 . 4054) (#("false" 0 1 (face font-lock-constant-face fontified t) 1 2 (face font-lock-constant-face fontified t) 2 3 (face font-lock-constant-face fontified t) 3 4 (face font-lock-constant-face fontified t) 4 5 (face font-lock-constant-face fontified t)) . 4053)) nil (26692 29742 536273 946000) 0 nil])
([nil nil ((1 . 5120) (#("#include \"../include/game.hpp\"
#include \"../include/terminal_input.hpp\"
#include \"../include/utils.hpp\"
#include \"../include/visuals.hpp\"
#include \"../include/word_machine.hpp\"
#include <cctype>
#include <iostream>
#include <string>
#include <unistd.h> // For usleep
#include <vector>
// WORDLE

int WORD_LENGTH = 5;
int AMOUNT_OF_WORDS = 6;

char cursor_char = '_';

int word_position = 0;
bool won = false;
bool lost = false;

std::string solution;
// Stores the letters which get visualized
std::vector<std::vector<std::string>> enteredWords;

// Array needed for colorization
std::vector<std::vector<int>> letter_color;

std::string attempt = \"\";

// Dictates the current row
int attempt_counter = 0;

constexpr int GREEN_ID = 1;
constexpr int YELLOW_ID = 2;
constexpr int GREY_ID = 3;

bool invalid_word_msg = false;
bool invalid_length_msg = false;
bool show_menu = false;

void try_guess() {
  //
  for (int i = 0; i < WORD_LENGTH; i++) {
    if (!enteredWords[attempt_counter][i].empty()) {
      attempt += std::tolower(enteredWords[attempt_counter][i][0]);
    } else {
      attempt += cursor_char; // or some sentinel char
    }
  }
  if (WORD_LENGTH == 5) {
    if (acceptableWords5.count(attempt) == 0) {
      invalid_word_msg = true;
      attempt = \"\";
      return;
    }

  } else if (WORD_LENGTH == 6) {
    if (acceptableWords6.count(attempt) == 0) {
      invalid_word_msg = true;
      attempt = \"\";
      return;
    }
  } else if (WORD_LENGTH == 7) {
    if (acceptableWords7.count(attempt) == 0) {
      invalid_word_msg = true;
      attempt = \"\";
      return;
    }
  }
  if (attempt == solution) {
    won = true;
  }
  // Track matched positions
  std::vector<bool> matchedSolution = {false};
  std::vector<bool> matchedAttempt = {false};
  matchedSolution.resize(WORD_LENGTH);
  matchedAttempt.resize(WORD_LENGTH);

  // First pass: Green letters
  for (int i = 0; i < WORD_LENGTH; i++) {
    if (attempt[i] == solution[i]) {
      letter_color[attempt_counter][i] = GREEN_ID;
      matchedSolution[i] = true;
      matchedAttempt[i] = true;
    }
  }

  // Second pass: Yellow letters
  for (int i = 0; i < WORD_LENGTH; i++) {
    if (matchedAttempt[i])
      continue; // already green

    bool found_yellow = false;
    for (int j = 0; j < WORD_LENGTH; j++) {
      if (!matchedSolution[j] && attempt[i] == solution[j]) {
        letter_color[attempt_counter][i] = YELLOW_ID;
        matchedSolution[j] = true;
        found_yellow = true;
        break;
      }
    }
    if (!found_yellow) {
      letter_color[attempt_counter][i] = GREY_ID;
    }
  }
  attempt = \"\";
  word_position = 0;
  if (attempt_counter + 1 == AMOUNT_OF_WORDS) {
    lost = true;
    return;
  }
  attempt_counter++;
  enteredWords[attempt_counter][word_position] = \"_\";
}

void handle_input() {
  // Display player input
  if (current_key >= 'a' && current_key <= 'z' && word_position < WORD_LENGTH) {
    enteredWords[attempt_counter][word_position] =
        std::string(1, current_key - 32);
    current_key = 0; // reset key to not trigger spam
    word_position++;
    if (word_position < WORD_LENGTH) {
      enteredWords[attempt_counter][word_position] = '_';
    }
  }

  if (current_key == 32) {
    current_key = 0; // reset key to not trigger spam
    word_position++;
    if (word_position < WORD_LENGTH) {
      enteredWords[attempt_counter][word_position] = '_';
    }
  }

  if (backspace_pressed) {
    backspace_pressed = false; // reset immediately
    if (word_position > 0) {
      if (word_position < WORD_LENGTH) {
        enteredWords[attempt_counter][word_position] = \"\";
      }
      word_position--;
      enteredWords[attempt_counter][word_position] = '_';
    }
  }

  if (enter_pressed) {
    enter_pressed = false;
    if (word_position == WORD_LENGTH) {
      try_guess();
    } else {
      invalid_length_msg = true;
    }
  }
  if (tab_pressed) {
    if (show_menu)
      {
    tab_pressed = false;
    show_menu = false;
      }
    else if (!show_menu)
      {
    tab_pressed = false;
    show_menu = true;
      }
  }
}

std::string get_solution() { return solution; }

void setup_game() {
  solution = random_word();

  enteredWords.resize(AMOUNT_OF_WORDS);

  for (std::vector<std::string> &row : enteredWords) {
    row.resize(WORD_LENGTH);
  }

  letter_color.resize(AMOUNT_OF_WORDS);
  for (std::vector<int> &row : letter_color) {
    row.resize(WORD_LENGTH);
  }

  // intialize the board with one space
  for (int i = 0; i < AMOUNT_OF_WORDS; i++) {
    for (int j = 0; j < WORD_LENGTH; j++) {
      enteredWords[i][j] = \" \";
    }
  }
}

int won_code = 1;
int lost_code = 2;

int check_game_over() {
  if (won) {
    clear_screen();
    print_board(enteredWords, won_code);
    std::cout << \"You won!\\n\";
    return 0;
  } else if (lost) {
    clear_screen();
    print_board(enteredWords, lost_code);
    std::cout << \"You lost! The answer was: \" << solution << \"\\n\";
    return 0;
  }
  return 69;
}

int update_game() {
  clear_screen();
  print_board(enteredWords, 0);
  handle_input();
  clear_screen();
  print_board(enteredWords, 0);

  return check_game_over();
}
" 0 1 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 1 8 (c-in-sws t face font-lock-preprocessor-face fontified t) 8 9 (c-in-sws t fontified t) 9 30 (c-in-sws t face font-lock-string-face fontified t) 30 31 (c-in-sws t fontified t) 31 32 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 32 39 (c-in-sws t face font-lock-preprocessor-face fontified t) 39 40 (c-in-sws t fontified t) 40 71 (c-in-sws t face font-lock-string-face fontified t) 71 72 (c-in-sws t fontified t) 72 73 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 73 80 (c-in-sws t face font-lock-preprocessor-face fontified t) 80 81 (c-in-sws t fontified t) 81 103 (c-in-sws t face font-lock-string-face fontified t) 103 104 (c-in-sws t fontified t) 104 105 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 105 112 (c-in-sws t face font-lock-preprocessor-face fontified t) 112 113 (c-in-sws t fontified t) 113 137 (c-in-sws t face font-lock-string-face fontified t) 137 138 (c-in-sws t fontified t) 138 139 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 139 146 (c-in-sws t face font-lock-preprocessor-face fontified t) 146 147 (c-in-sws t fontified t) 147 176 (c-in-sws t face font-lock-string-face fontified t) 176 177 (c-in-sws t fontified t) 177 178 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 178 185 (c-in-sws t face font-lock-preprocessor-face fontified t) 185 186 (c-in-sws t fontified t) 186 187 (c-in-sws t category c-<-as-paren-syntax face font-lock-string-face fontified t) 187 193 (c-in-sws t face font-lock-string-face fontified t) 193 194 (c-in-sws t category c->-as-paren-syntax face font-lock-string-face fontified t) 194 195 (c-in-sws t fontified t) 195 196 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 196 203 (c-in-sws t face font-lock-preprocessor-face fontified t) 203 204 (c-in-sws t fontified t) 204 205 (c-in-sws t category c-<-as-paren-syntax face font-lock-string-face fontified t) 205 213 (c-in-sws t face font-lock-string-face fontified t) 213 214 (c-in-sws t category c->-as-paren-syntax face font-lock-string-face fontified t) 214 215 (c-in-sws t fontified t) 215 216 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 216 223 (c-in-sws t face font-lock-preprocessor-face fontified t) 223 224 (c-in-sws t fontified t) 224 225 (c-in-sws t category c-<-as-paren-syntax face font-lock-string-face fontified t) 225 231 (c-in-sws t face font-lock-string-face fontified t) 231 232 (c-in-sws t category c->-as-paren-syntax face font-lock-string-face fontified t) 232 233 (c-in-sws t fontified t) 233 234 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 234 241 (c-in-sws t face font-lock-preprocessor-face fontified t) 241 242 (c-in-sws t fontified t) 242 243 (c-in-sws t category c-<-as-paren-syntax face font-lock-string-face fontified t) 243 251 (c-in-sws t face font-lock-string-face fontified t) 251 252 (c-in-sws t category c->-as-paren-syntax face font-lock-string-face fontified t) 252 253 (c-in-sws t fontified t) 253 256 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 256 267 (c-in-sws t face font-lock-comment-face fontified t) 267 268 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 268 275 (c-in-sws t face font-lock-preprocessor-face fontified t) 275 276 (c-in-sws t fontified t) 276 277 (c-in-sws t category c-<-as-paren-syntax face font-lock-string-face fontified t) 277 283 (c-in-sws t face font-lock-string-face fontified t) 283 284 (c-in-sws t category c->-as-paren-syntax face font-lock-string-face fontified t) 284 285 (c-in-sws t fontified t) 285 286 (c-in-sws t c-is-sws t face font-lock-comment-delimiter-face fontified t) 286 288 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 288 295 (c-in-sws t face font-lock-comment-face fontified t) 295 296 (c-in-sws t fontified t) 296 297 (face font-lock-type-face c-is-sws t fontified t) 297 298 (face font-lock-type-face fontified t) 298 299 (face font-lock-type-face c-type c-decl-id-start fontified t) 299 300 (fontified t) 300 311 (face font-lock-variable-name-face fontified t) 311 317 (fontified t) 317 319 (face font-lock-type-face fontified t) 319 320 (face font-lock-type-face c-type c-decl-id-start fontified t) 320 321 (fontified t) 321 336 (face font-lock-variable-name-face fontified t) 336 343 (fontified t) 343 346 (face font-lock-type-face fontified t) 346 347 (face font-lock-type-face c-type c-decl-id-start fontified t) 347 348 (fontified t) 348 359 (face font-lock-variable-name-face fontified t) 359 362 (fontified t) 362 365 (face font-lock-string-face fontified t) 365 368 (fontified t) 368 370 (face font-lock-type-face fontified t) 370 371 (face font-lock-type-face c-type c-decl-id-start fontified t) 371 372 (fontified t) 372 385 (face font-lock-variable-name-face fontified t) 385 391 (fontified t) 391 394 (face font-lock-type-face fontified t) 394 395 (face font-lock-type-face c-type c-decl-id-start fontified t) 395 396 (fontified t) 396 399 (face font-lock-variable-name-face fontified t) 399 402 (fontified t) 402 407 (face font-lock-constant-face fontified t) 407 409 (fontified t) 409 412 (face font-lock-type-face fontified t) 412 413 (face font-lock-type-face c-type c-decl-id-start fontified t) 413 414 (fontified t) 414 418 (face font-lock-variable-name-face fontified t) 418 421 (fontified t) 421 426 (face font-lock-constant-face fontified t) 426 429 (fontified t) 429 432 (face font-lock-constant-face fontified t) 432 434 (fontified t) 434 439 (face font-lock-type-face fontified t) 439 440 (face font-lock-type-face c-type c-decl-id-start fontified t) 440 441 (fontified t) 441 449 (face font-lock-variable-name-face fontified t) 449 451 (fontified t) 451 452 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 452 454 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 454 494 (c-in-sws t face font-lock-comment-face fontified t) 494 495 (c-is-sws t face font-lock-constant-face fontified t) 495 497 (face font-lock-constant-face fontified t) 497 499 (fontified t) 499 505 (face font-lock-type-face fontified t) 505 506 (fontified t category c-<-as-paren-syntax) 506 509 (face font-lock-constant-face fontified t) 509 511 (fontified t) 511 517 (face font-lock-type-face fontified t) 517 518 (fontified t category c-<-as-paren-syntax) 518 521 (face font-lock-constant-face fontified t) 521 523 (fontified t) 523 529 (face font-lock-type-face fontified t) 529 530 (fontified t category c->-as-paren-syntax) 530 531 (c-type c-decl-id-start fontified t category c->-as-paren-syntax) 531 532 (fontified t) 532 544 (face font-lock-variable-name-face fontified t) 544 547 (fontified t) 547 548 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 548 550 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 550 580 (c-in-sws t face font-lock-comment-face fontified t) 580 581 (c-is-sws t face font-lock-constant-face fontified t) 581 583 (face font-lock-constant-face fontified t) 583 585 (fontified t) 585 591 (face font-lock-type-face fontified t) 591 592 (fontified t category c-<-as-paren-syntax) 592 595 (face font-lock-constant-face fontified t) 595 597 (fontified t) 597 603 (face font-lock-type-face fontified t) 603 604 (fontified t category c-<-as-paren-syntax) 604 607 (face font-lock-type-face fontified t) 607 608 (fontified t category c->-as-paren-syntax) 608 609 (c-type c-decl-id-start fontified t category c->-as-paren-syntax) 609 610 (fontified t) 610 622 (face font-lock-variable-name-face fontified t) 622 625 (fontified t) 625 628 (face font-lock-constant-face fontified t) 628 630 (fontified t) 630 635 (face font-lock-type-face fontified t) 635 636 (face font-lock-type-face c-type c-decl-id-start fontified t) 636 637 (fontified t) 637 644 (face font-lock-variable-name-face fontified t) 644 647 (fontified t) 647 649 (face font-lock-string-face fontified t) 649 652 (fontified t) 652 653 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 653 655 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 655 680 (c-in-sws t face font-lock-comment-face fontified t) 680 681 (face font-lock-type-face c-is-sws t fontified t) 681 682 (face font-lock-type-face fontified t) 682 683 (face font-lock-type-face c-type c-decl-id-start fontified t) 683 684 (fontified t) 684 699 (face font-lock-variable-name-face fontified t) 699 706 (fontified t) 706 715 (face font-lock-keyword-face fontified t) 715 716 (fontified t) 716 718 (face font-lock-type-face fontified t) 718 719 (face font-lock-type-face c-type c-decl-id-start fontified t) 719 720 (fontified t) 720 728 (face font-lock-variable-name-face fontified t) 728 734 (fontified t) 734 743 (face font-lock-keyword-face fontified t) 743 744 (fontified t) 744 746 (face font-lock-type-face fontified t) 746 747 (face font-lock-type-face c-type c-decl-id-start fontified t) 747 748 (fontified t) 748 757 (face font-lock-variable-name-face fontified t) 757 763 (fontified t) 763 772 (face font-lock-keyword-face fontified t) 772 773 (fontified t) 773 775 (face font-lock-type-face fontified t) 775 776 (face font-lock-type-face c-type c-decl-id-start fontified t) 776 777 (fontified t) 777 784 (face font-lock-variable-name-face fontified t) 784 791 (fontified t) 791 794 (face font-lock-type-face fontified t) 794 795 (face font-lock-type-face c-type c-decl-id-start fontified t) 795 796 (fontified t) 796 812 (face font-lock-variable-name-face fontified t) 812 815 (fontified t) 815 820 (face font-lock-constant-face fontified t) 820 822 (fontified t) 822 825 (face font-lock-type-face fontified t) 825 826 (face font-lock-type-face c-type c-decl-id-start fontified t) 826 827 (fontified t) 827 845 (face font-lock-variable-name-face fontified t) 845 848 (fontified t) 848 853 (face font-lock-constant-face fontified t) 853 855 (fontified t) 855 858 (face font-lock-type-face fontified t) 858 859 (face font-lock-type-face c-type c-decl-id-start fontified t) 859 860 (fontified t) 860 869 (face font-lock-variable-name-face fontified t) 869 872 (fontified t) 872 877 (face font-lock-constant-face fontified t) 877 880 (fontified t) 880 883 (face font-lock-type-face fontified t) 883 884 (face font-lock-type-face c-type c-decl-id-start fontified t) 884 885 (fontified t) 885 894 (face font-lock-function-name-face fontified t) 894 899 (fontified t) 899 901 (c-is-sws t c-in-sws t fontified t) 901 902 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 902 903 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 903 904 (c-in-sws t face font-lock-comment-face fontified t) 904 906 (c-in-sws t c-is-sws t fontified t) 906 907 (c-is-sws t face font-lock-keyword-face fontified t) 907 909 (face font-lock-keyword-face fontified t) 909 911 (fontified t) 911 913 (face font-lock-type-face fontified t) 913 914 (face font-lock-type-face c-type c-decl-id-start fontified t) 914 915 (fontified t) 915 916 (face font-lock-variable-name-face fontified t) 916 950 (fontified t) 950 952 (face font-lock-keyword-face fontified t) 952 954 (fontified t) 954 955 (face font-lock-negation-char-face fontified t) 955 1016 (fontified t) 1016 1019 (face font-lock-constant-face fontified t) 1019 1073 (fontified t) 1073 1077 (face font-lock-keyword-face fontified t) 1077 1110 (fontified t) 1110 1113 (face font-lock-comment-delimiter-face fontified t) 1113 1135 (face font-lock-comment-face fontified t) 1135 1147 (fontified t) 1147 1149 (face font-lock-keyword-face fontified t) 1149 1175 (fontified t) 1175 1177 (face font-lock-keyword-face fontified t) 1177 1244 (fontified t) 1244 1248 (face font-lock-constant-face fontified t) 1248 1266 (fontified t) 1266 1268 (face font-lock-string-face fontified t) 1268 1276 (fontified t) 1276 1282 (face font-lock-keyword-face fontified t) 1282 1295 (fontified t) 1295 1299 (face font-lock-keyword-face fontified t) 1299 1300 (fontified t) 1300 1302 (face font-lock-keyword-face fontified t) 1302 1328 (fontified t) 1328 1330 (face font-lock-keyword-face fontified t) 1330 1397 (fontified t) 1397 1401 (face font-lock-constant-face fontified t) 1401 1419 (fontified t) 1419 1421 (face font-lock-string-face fontified t) 1421 1429 (fontified t) 1429 1435 (face font-lock-keyword-face fontified t) 1435 1447 (fontified t) 1447 1451 (face font-lock-keyword-face fontified t) 1451 1452 (fontified t) 1452 1454 (face font-lock-keyword-face fontified t) 1454 1476 (fontified t) 1476 1480 (fontified t) 1480 1482 (face font-lock-keyword-face fontified t) 1482 1500 (fontified t) 1500 1518 (fontified t) 1518 1549 (fontified t) 1549 1553 (face font-lock-constant-face fontified t) 1553 1571 (fontified t) 1571 1573 (face font-lock-string-face fontified t) 1573 1581 (fontified t) 1581 1587 (face font-lock-keyword-face fontified t) 1587 1601 (fontified t) 1601 1603 (face font-lock-keyword-face fontified t) 1603 1638 (fontified t) 1638 1642 (face font-lock-constant-face fontified t) 1642 1648 (fontified t) 1648 1650 (c-is-sws t c-in-sws t fontified t) 1650 1651 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 1651 1653 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 1653 1677 (c-in-sws t face font-lock-comment-face fontified t) 1677 1679 (c-in-sws t c-is-sws t fontified t) 1679 1680 (c-is-sws t face font-lock-constant-face fontified t) 1680 1682 (face font-lock-constant-face fontified t) 1682 1684 (fontified t) 1684 1690 (face font-lock-type-face fontified t) 1690 1691 (fontified t category c-<-as-paren-syntax) 1691 1695 (face font-lock-type-face fontified t) 1695 1696 (c-type c-decl-id-start fontified t category c->-as-paren-syntax) 1696 1697 (fontified t) 1697 1712 (face font-lock-variable-name-face fontified t) 1712 1715 (fontified t) 1715 1716 (c-type c-not-decl fontified t) 1716 1721 (face font-lock-constant-face fontified t) 1721 1726 (fontified t) 1726 1729 (face font-lock-constant-face fontified t) 1729 1731 (fontified t) 1731 1737 (face font-lock-type-face fontified t) 1737 1738 (fontified t category c-<-as-paren-syntax) 1738 1742 (face font-lock-type-face fontified t) 1742 1743 (c-type c-decl-id-start fontified t category c->-as-paren-syntax) 1743 1744 (fontified t) 1744 1758 (face font-lock-variable-name-face fontified t) 1758 1761 (fontified t) 1761 1762 (c-type c-not-decl fontified t) 1762 1767 (face font-lock-constant-face fontified t) 1767 1848 (fontified t) 1848 1850 (c-is-sws t c-in-sws t fontified t) 1850 1851 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 1851 1853 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 1853 1879 (c-in-sws t face font-lock-comment-face fontified t) 1879 1881 (c-in-sws t c-is-sws t fontified t) 1881 1882 (c-is-sws t face font-lock-keyword-face fontified t) 1882 1884 (face font-lock-keyword-face fontified t) 1884 1886 (fontified t) 1886 1888 (face font-lock-type-face fontified t) 1888 1889 (face font-lock-type-face c-type c-decl-id-start fontified t) 1889 1890 (fontified t) 1890 1891 (face font-lock-variable-name-face fontified t) 1891 1925 (fontified t) 1925 1927 (face font-lock-keyword-face fontified t) 1927 2036 (fontified t) 2036 2040 (face font-lock-constant-face fontified t) 2040 2068 (fontified t) 2068 2072 (face font-lock-constant-face fontified t) 2072 2087 (fontified t) 2087 2090 (face font-lock-comment-delimiter-face fontified t) 2090 2118 (face font-lock-comment-face fontified t) 2118 2120 (fontified t) 2120 2123 (face font-lock-keyword-face fontified t) 2123 2125 (fontified t) 2125 2127 (face font-lock-type-face fontified t) 2127 2128 (face font-lock-type-face c-type c-decl-id-start fontified t) 2128 2129 (fontified t) 2129 2130 (face font-lock-variable-name-face fontified t) 2130 2164 (fontified t) 2164 2166 (face font-lock-keyword-face fontified t) 2166 2193 (fontified t) 2193 2201 (face font-lock-keyword-face fontified t) 2201 2202 (fontified t) 2202 2203 (c-is-sws t c-in-sws t fontified t) 2203 2204 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 2204 2206 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 2206 2220 (c-in-sws t face font-lock-comment-face fontified t) 2220 2221 (c-in-sws t fontified t) 2221 2225 (c-in-sws t c-is-sws t fontified t) 2225 2226 (face font-lock-type-face c-is-sws t fontified t) 2226 2228 (face font-lock-type-face fontified t) 2228 2229 (face font-lock-type-face c-type c-decl-id-start fontified t) 2229 2230 (fontified t) 2230 2242 (face font-lock-variable-name-face fontified t) 2242 2245 (fontified t) 2245 2250 (face font-lock-constant-face fontified t) 2250 2256 (fontified t) 2256 2259 (face font-lock-keyword-face fontified t) 2259 2261 (fontified t) 2261 2263 (face font-lock-type-face fontified t) 2263 2264 (face font-lock-type-face c-type c-decl-id-start fontified t) 2264 2265 (fontified t) 2265 2266 (face font-lock-variable-name-face fontified t) 2266 2302 (fontified t) 2302 2304 (face font-lock-keyword-face fontified t) 2304 2306 (fontified t) 2306 2307 (face font-lock-negation-char-face fontified t) 2307 2441 (fontified t) 2441 2445 (face font-lock-constant-face fontified t) 2445 2470 (fontified t) 2470 2474 (face font-lock-constant-face fontified t) 2474 2484 (fontified t) 2484 2489 (face font-lock-keyword-face fontified t) 2489 2509 (fontified t) 2509 2511 (face font-lock-keyword-face fontified t) 2511 2513 (fontified t) 2513 2514 (face font-lock-negation-char-face fontified t) 2514 2602 (fontified t) 2602 2604 (face font-lock-string-face fontified t) 2604 2629 (fontified t) 2629 2631 (face font-lock-keyword-face fontified t) 2631 2686 (fontified t) 2686 2690 (face font-lock-constant-face fontified t) 2690 2696 (fontified t) 2696 2702 (face font-lock-keyword-face fontified t) 2702 2778 (fontified t) 2778 2781 (face font-lock-string-face fontified t) 2781 2786 (fontified t) 2786 2789 (face font-lock-type-face fontified t) 2789 2790 (face font-lock-type-face c-type c-decl-id-start fontified t) 2790 2791 (fontified t) 2791 2803 (face font-lock-function-name-face fontified t) 2803 2808 (fontified t) 2808 2810 (c-is-sws t c-in-sws t fontified t) 2810 2811 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 2811 2813 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 2813 2834 (c-in-sws t face font-lock-comment-face fontified t) 2834 2836 (c-in-sws t c-is-sws t fontified t) 2836 2837 (c-is-sws t face font-lock-keyword-face fontified t) 2837 2838 (face font-lock-keyword-face fontified t) 2838 2855 (fontified t) 2855 2858 (face font-lock-string-face fontified t) 2858 2877 (fontified t) 2877 2880 (face font-lock-string-face fontified t) 2880 2974 (fontified t) 2974 2977 (face font-lock-constant-face fontified t) 2977 3008 (fontified t) 3008 3018 (fontified t) 3018 3025 (fontified t) 3025 3028 (fontified t) 3028 3029 (c-is-sws t c-in-sws t fontified t) 3029 3030 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 3030 3032 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 3032 3062 (c-in-sws t face font-lock-comment-face fontified t) 3062 3066 (c-in-sws t c-is-sws t fontified t) 3066 3067 (c-is-sws t fontified t) 3067 3087 (fontified t) 3087 3089 (face font-lock-keyword-face fontified t) 3089 3175 (fontified t) 3175 3178 (face font-lock-string-face fontified t) 3178 3193 (fontified t) 3193 3195 (face font-lock-keyword-face fontified t) 3195 3238 (fontified t) 3238 3239 (c-is-sws t c-in-sws t fontified t) 3239 3240 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 3240 3242 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 3242 3272 (c-in-sws t face font-lock-comment-face fontified t) 3272 3276 (c-in-sws t c-is-sws t fontified t) 3276 3277 (c-is-sws t fontified t) 3277 3297 (fontified t) 3297 3299 (face font-lock-keyword-face fontified t) 3299 3385 (fontified t) 3385 3388 (face font-lock-string-face fontified t) 3388 3403 (fontified t) 3403 3405 (face font-lock-keyword-face fontified t) 3405 3452 (fontified t) 3452 3457 (face font-lock-constant-face fontified t) 3457 3458 (fontified t) 3458 3459 (c-is-sws t c-in-sws t fontified t) 3459 3460 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 3460 3462 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 3462 3480 (c-in-sws t face font-lock-comment-face fontified t) 3480 3484 (c-in-sws t c-is-sws t fontified t) 3484 3485 (c-is-sws t face font-lock-keyword-face fontified t) 3485 3486 (face font-lock-keyword-face fontified t) 3486 3515 (fontified t) 3515 3517 (face font-lock-keyword-face fontified t) 3517 3605 (fontified t) 3605 3607 (face font-lock-string-face fontified t) 3607 3693 (fontified t) 3693 3696 (face font-lock-string-face fontified t) 3696 3711 (fontified t) 3711 3713 (face font-lock-keyword-face fontified t) 3713 3752 (fontified t) 3752 3757 (face font-lock-constant-face fontified t) 3757 3763 (fontified t) 3763 3765 (face font-lock-keyword-face fontified t) 3765 3824 (fontified t) 3824 3828 (face font-lock-keyword-face fontified t) 3828 3858 (fontified t) 3858 3862 (face font-lock-constant-face fontified t) 3862 3874 (fontified t) 3874 3876 (fontified t) 3876 3878 (face font-lock-keyword-face fontified t) 3878 3894 (fontified t) 3894 3895 (fontified t) 3895 3899 (fontified t) 3899 3900 (face font-lock-keyword-face fontified t) 3900 3901 (face font-lock-keyword-face fontified t) 3901 3902 (fontified t) 3902 3903 (fontified t) 3903 3911 (fontified t) 3911 3912 (fontified t) 3912 3913 (fontified t) 3913 3914 (fontified t) 3914 3920 (fontified t) 3920 3921 (fontified t) 3921 3922 (fontified t) 3922 3925 (fontified t) 3925 3926 (rear-nonsticky t fontified t) 3926 3937 (fontified t) 3937 3939 (fontified t) 3939 3940 (fontified t) 3940 3945 (face font-lock-constant-face fontified t) 3945 3946 (fontified t) 3946 3947 (fontified t) 3947 3950 (fontified t) 3950 3951 (fontified t rear-nonsticky t) 3951 3963 (fontified t) 3963 3964 (face font-lock-constant-face fontified t) 3964 3965 (face font-lock-constant-face fontified t) 3965 3966 (face font-lock-constant-face fontified t) 3966 3967 (face font-lock-constant-face fontified t) 3967 3968 (face font-lock-constant-face fontified t) 3968 3969 (fontified t) 3969 3970 (fontified t) 3970 3976 (fontified t) 3976 3977 (fontified t) 3977 3978 (fontified t) 3978 3981 (fontified t) 3981 3982 (rear-nonsticky t fontified t) 3982 3986 (face font-lock-keyword-face fontified t) 3986 3987 (fontified t) 3987 3988 (face font-lock-keyword-face fontified t) 3988 3989 (face font-lock-keyword-face fontified t) 3989 3990 (fontified t) 3990 3991 (fontified t) 3991 3992 (face font-lock-negation-char-face fontified t) 3992 4000 (fontified t) 4000 4001 (fontified t) 4001 4002 (fontified t) 4002 4003 (fontified t) 4003 4009 (fontified t) 4009 4010 (fontified t) 4010 4011 (fontified t) 4011 4014 (fontified t) 4014 4015 (fontified t rear-nonsticky t) 4015 4026 (fontified t) 4026 4028 (fontified t) 4028 4029 (fontified t) 4029 4034 (face font-lock-constant-face fontified t) 4034 4035 (fontified t) 4035 4036 (fontified t) 4036 4039 (fontified t) 4039 4040 (fontified t rear-nonsticky t) 4040 4052 (fontified t) 4052 4053 (face font-lock-constant-face fontified t) 4053 4054 (face font-lock-constant-face fontified t) 4054 4055 (face font-lock-constant-face fontified t) 4055 4056 (face font-lock-constant-face fontified t) 4056 4057 (fontified t) 4057 4058 (fontified t) 4058 4064 (fontified t) 4064 4065 (fontified t) 4065 4066 (fontified t) 4066 4069 (fontified t) 4069 4070 (fontified t) 4070 4073 (fontified t) 4073 4076 (face font-lock-constant-face fontified t) 4076 4078 (fontified t) 4078 4083 (face font-lock-type-face fontified t) 4083 4084 (face font-lock-type-face c-type c-decl-id-start fontified t) 4084 4085 (fontified t) 4085 4097 (face font-lock-function-name-face fontified t) 4097 4102 (fontified t) 4102 4108 (face font-lock-keyword-face fontified t) 4108 4121 (fontified t) 4121 4122 (fontified t) 4122 4125 (face font-lock-type-face fontified t) 4125 4126 (face font-lock-type-face c-type c-decl-id-start fontified t) 4126 4127 (fontified t) 4127 4137 (face font-lock-function-name-face fontified t) 4137 4214 (fontified t) 4214 4217 (face font-lock-keyword-face fontified t) 4217 4219 (fontified t) 4219 4222 (face font-lock-constant-face fontified t) 4222 4224 (fontified t) 4224 4230 (face font-lock-type-face fontified t) 4230 4231 (fontified t category c-<-as-paren-syntax) 4231 4234 (face font-lock-constant-face fontified t) 4234 4236 (fontified t) 4236 4242 (face font-lock-type-face fontified t) 4242 4243 (c-type c-decl-id-start fontified t category c->-as-paren-syntax) 4243 4245 (fontified t) 4245 4248 (face font-lock-variable-name-face fontified t) 4248 4343 (fontified t) 4343 4346 (face font-lock-keyword-face fontified t) 4346 4348 (fontified t) 4348 4351 (face font-lock-constant-face fontified t) 4351 4353 (fontified t) 4353 4359 (face font-lock-type-face fontified t) 4359 4360 (fontified t category c-<-as-paren-syntax) 4360 4363 (face font-lock-type-face fontified t) 4363 4364 (c-type c-decl-id-start fontified t category c->-as-paren-syntax) 4364 4366 (fontified t) 4366 4369 (face font-lock-variable-name-face fontified t) 4369 4422 (fontified t) 4422 4424 (fontified t c-is-sws t c-in-sws t) 4424 4425 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 4425 4427 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 4427 4462 (face font-lock-comment-face fontified t c-in-sws t) 4462 4464 (fontified t c-in-sws t c-is-sws t) 4464 4465 (face font-lock-keyword-face fontified t c-is-sws t) 4465 4467 (face font-lock-keyword-face fontified t) 4467 4469 (fontified t) 4469 4471 (face font-lock-type-face fontified t) 4471 4472 (face font-lock-type-face c-type c-decl-id-start fontified t) 4472 4473 (fontified t) 4473 4474 (face font-lock-variable-name-face fontified t) 4474 4512 (fontified t) 4512 4515 (face font-lock-keyword-face fontified t) 4515 4517 (fontified t) 4517 4519 (face font-lock-type-face fontified t) 4519 4520 (face font-lock-type-face c-type c-decl-id-start fontified t) 4520 4521 (fontified t) 4521 4522 (face font-lock-variable-name-face fontified t) 4522 4579 (fontified t) 4579 4582 (face font-lock-string-face fontified t) 4582 4597 (fontified t) 4597 4599 (face font-lock-type-face fontified t) 4599 4600 (face font-lock-type-face c-type c-decl-id-start fontified t) 4600 4601 (fontified t) 4601 4609 (face font-lock-variable-name-face fontified t) 4609 4615 (fontified t) 4615 4617 (face font-lock-type-face fontified t) 4617 4618 (face font-lock-type-face c-type c-decl-id-start fontified t) 4618 4619 (fontified t) 4619 4628 (face font-lock-variable-name-face fontified t) 4628 4635 (fontified t) 4635 4637 (face font-lock-type-face fontified t) 4637 4638 (face font-lock-type-face c-type c-decl-id-start fontified t) 4638 4639 (fontified t) 4639 4649 (face font-lock-function-name-face fontified t) 4649 4654 (face font-lock-function-name-face fontified t) 4654 4658 (fontified t) 4658 4661 (fontified t) 4661 4663 (face font-lock-keyword-face fontified t) 4663 4737 (fontified t) 4737 4740 (face font-lock-constant-face fontified t) 4740 4750 (fontified t) 4750 4762 (face font-lock-string-face fontified t) 4762 4768 (fontified t) 4768 4774 (face font-lock-keyword-face fontified t) 4774 4782 (fontified t) 4782 4786 (face font-lock-keyword-face fontified t) 4786 4787 (fontified t) 4787 4789 (face font-lock-keyword-face fontified t) 4789 4865 (fontified t) 4865 4868 (face font-lock-constant-face fontified t) 4868 4878 (fontified t) 4878 4906 (face font-lock-string-face fontified t) 4906 4922 (fontified t) 4922 4926 (face font-lock-string-face fontified t) 4926 4932 (fontified t) 4932 4938 (face font-lock-keyword-face fontified t) 4938 4948 (fontified t) 4948 4954 (face font-lock-keyword-face fontified t) 4954 4962 (fontified t) 4962 4964 (face font-lock-type-face fontified t) 4964 4965 (face font-lock-type-face c-type c-decl-id-start fontified t) 4965 4966 (fontified t) 4966 4977 (face font-lock-function-name-face fontified t) 4977 5103 (fontified t) 5103 5109 (face font-lock-keyword-face fontified t) 5109 5131 (fontified t)) . 1) (undo-tree-id430 . -30) (undo-tree-id431 . -4065) (undo-tree-id432 . -3191) (undo-tree-id433 . -4056) (undo-tree-id434 . 1075) (undo-tree-id435 . -4052) (undo-tree-id436 . -4056) (undo-tree-id437 . -3895) (undo-tree-id438 . 1065) (undo-tree-id439 . -3895) (undo-tree-id440 . -3970) (undo-tree-id441 . -3978) (undo-tree-id442 . -4065) (undo-tree-id443 . -1770) (undo-tree-id444 . -1770) (undo-tree-id445 . -1770) (undo-tree-id446 . -1770) (undo-tree-id447 . 1075) (undo-tree-id448 . -3191) (undo-tree-id449 . -4055) (undo-tree-id450 . -4055) 4056) nil (26692 30010 351171 519000) 0 nil])
([nil nil ((4087 . 4089) (#("    " 0 4 (fontified nil)) . 4087) (undo-tree-id523 . -4) (undo-tree-id524 . -4) (4091 . 4092) (4087 . 4091) (#("    " 0 4 (fontified nil)) . 4086) (undo-tree-id525 . -4) (undo-tree-id526 . -4) (4085 . 4091) (4084 . 4085) (4083 . 4084) (4082 . 4083) (#("(" 0 1 (fontified t)) . -4082) (undo-tree-id527 . -1) (undo-tree-id528 . -1) 4083 (4082 . 4083) (4080 . 4082) (4076 . 4080) (4065 . 4076) (#("cur" 0 3 (fontified nil)) . 4065) (4065 . 4068) (#("current_key" 0 11 (fontified nil)) . -4065) (4065 . 4076) (#("curre" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . -4065) (undo-tree-id529 . -5) (undo-tree-id530 . -5) (undo-tree-id531 . -5) (undo-tree-id532 . -5) 4070 (4065 . 4070) (#(" " 0 1 (fontified t)) . -4065) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (#("s" 0 1 (fontified t)) . -4066) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (#("o" 0 1 (fontified t)) . -4067) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (#("w" 0 1 (fontified t)) . -4068) (undo-tree-id546 . -1) (undo-tree-id547 . -1) 4069 (4065 . 4069) (4064 . 4065) (4061 . 4064) (4058 . 4061) (t 26692 29742 537975 78000)) nil (26692 30088 217001 827000) 0 nil] [nil nil ((#("  " 0 2 (fontified t)) . -3402) (undo-tree-id475 . -2) (undo-tree-id476 . -2) (undo-tree-id477 . -2) (undo-tree-id478 . -2) (undo-tree-id479 . -2) (undo-tree-id480 . -2) (undo-tree-id481 . -2) (undo-tree-id482 . -2) (undo-tree-id483 . -2) (undo-tree-id484 . -2) (undo-tree-id485 . -2) (undo-tree-id486 . -2) (undo-tree-id487 . -2) (undo-tree-id488 . -2) (undo-tree-id489 . -2) (undo-tree-id490 . -2) 3404 (3401 . 3404) (t 26692 29742 537975 78000)) ((#("
  " 0 1 (fontified t) 1 3 (fontified nil)) . 3401) (undo-tree-id491 . -3) (undo-tree-id492 . -3) (undo-tree-id493 . -3) (undo-tree-id494 . -3) (undo-tree-id495 . -3) (undo-tree-id496 . -3) (undo-tree-id497 . -3) (undo-tree-id498 . -3) (undo-tree-id499 . -3) (undo-tree-id500 . -3) (undo-tree-id501 . -3) (undo-tree-id502 . -3) (undo-tree-id503 . -3) (undo-tree-id504 . -3) (undo-tree-id505 . -3) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (3402 . 3404)) (26692 30010 348373 460000) 0 nil])
([nil nil ((4086 . 4090)) nil (26692 30088 216995 713000) 0 nil])
nil
([nil nil ((4077 . 4082) (4076 . 4077) (4075 . 4076) (4074 . 4075) (4065 . 4074) (#("sho" 0 3 (fontified nil)) . 4065) (4065 . 4068) (#("show_menu" 0 9 (fontified nil)) . -4065) (4065 . 4074) (#("show" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -4065) (undo-tree-id519 . -4) (undo-tree-id520 . -4) (undo-tree-id521 . -4) (undo-tree-id522 . -4) 4069 (4065 . 4069) (4064 . 4065) (4061 . 4064) (4058 . 4061)) nil (26692 30088 216995 236000) 0 nil])
([nil nil ((#("  if (current_key == 50) {
    
  }
" 0 2 (fontified t) 2 3 (face font-lock-keyword-face fontified t) 3 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 21 (fontified t) 21 22 (fontified t) 22 23 (fontified t) 23 24 (fontified t) 24 25 (fontified t) 25 26 (fontified t) 26 27 (fontified t) 27 31 (fontified t) 31 32 (fontified t) 32 34 (fontified t) 34 35 (fontified t) 35 36 (fontified t)) . 4083) (undo-tree-id514 . -35) (undo-tree-id515 . -3) (undo-tree-id516 . -35) (undo-tree-id517 . -35) (undo-tree-id518 . -35) 4118) nil (26692 30088 216993 681000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4084 . 4085) (#("
" 0 1 (fontified nil)) . -4118) (4082 . 4119) 4078) nil (26692 30088 216991 688000) 0 nil])
([nil nil ((4121 . 4122) (4118 . 4121) 4117) nil (26692 30088 216991 354000) 0 nil])
([nil nil ((4110 . 4114) (#("  " 0 2 (fontified nil)) . -4110) (undo-tree-id513 . -2) (#("  " 0 2 (fontified t)) . 4112)) nil (26692 30088 216991 14000) 0 nil])
([nil nil ((4110 . 4114) (#(" " 0 1 (fontified nil)) . -4110) (undo-tree-id512 . -1) (#("   " 0 3 (fontified t)) . 4111)) nil (26692 30088 216990 429000) 0 nil])
([nil nil ((4110 . 4114) (#("   " 0 3 (fontified nil)) . 4110) (4113 . 4115) (#("." 0 1 (fontified t)) . -4113) (undo-tree-id508 . -1) (undo-tree-id509 . -1) 4114 (#("." 0 1 (fontified t)) . -4114) (undo-tree-id510 . -1) (undo-tree-id511 . -1) 4115 (4113 . 4115)) nil (26692 30088 216989 724000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -4160) (4121 . 4161) 4120) nil (26692 30088 216981 569000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -4199) (4160 . 4200) 4159) nil (26692 30088 216981 229000) 0 nil])
([nil nil ((4104 . 4105) (#("5" 0 1 (fontified t)) . 4104)) nil (26692 30088 216980 862000) 0 nil])
([nil nil ((4105 . 4106) (#("0" 0 1 (fontified t)) . 4105)) nil (26692 30088 218849 309000) 0 nil])
([nil nil ((4183 . 4184) (#("0" 0 1 (fontified t)) . 4183)) nil (26692 30112 746968 188000) 0 nil] [nil nil ((4182 . 4183) (#("5" 0 1 (fontified t)) . 4182)) ((4182 . 4183) (#("l" 0 1 (fontified t)) . 4182)) (26692 30088 216977 513000) 0 nil])
([nil nil ((1 . 5276) (#("#include \"../include/game.hpp\"
#include \"../include/terminal_input.hpp\"
#include \"../include/utils.hpp\"
#include \"../include/visuals.hpp\"
#include \"../include/word_machine.hpp\"
#include <cctype>
#include <iostream>
#include <string>
#include <unistd.h> // For usleep
#include <vector>
// WORDLE

int WORD_LENGTH = 5;
int AMOUNT_OF_WORDS = 6;

char cursor_char = '_';

int word_position = 0;
bool won = false;
bool lost = false;

std::string solution;
// Stores the letters which get visualized
std::vector<std::vector<std::string>> enteredWords;

// Array needed for colorization
std::vector<std::vector<int>> letter_color;

std::string attempt = \"\";

// Dictates the current row
int attempt_counter = 0;

constexpr int GREEN_ID = 1;
constexpr int YELLOW_ID = 2;
constexpr int GREY_ID = 3;

bool invalid_word_msg = false;
bool invalid_length_msg = false;
bool show_menu = false;

void try_guess() {
  //
  for (int i = 0; i < WORD_LENGTH; i++) {
    if (!enteredWords[attempt_counter][i].empty()) {
      attempt += std::tolower(enteredWords[attempt_counter][i][0]);
    } else {
      attempt += cursor_char; // or some sentinel char
    }
  }
  if (WORD_LENGTH == 5) {
    if (acceptableWords5.count(attempt) == 0) {
      invalid_word_msg = true;
      attempt = \"\";
      return;
    }

  } else if (WORD_LENGTH == 6) {
    if (acceptableWords6.count(attempt) == 0) {
      invalid_word_msg = true;
      attempt = \"\";
      return;
    }
  } else if (WORD_LENGTH == 7) {
    if (acceptableWords7.count(attempt) == 0) {
      invalid_word_msg = true;
      attempt = \"\";
      return;
    }
  }
  if (attempt == solution) {
    won = true;
  }
  // Track matched positions
  std::vector<bool> matchedSolution = {false};
  std::vector<bool> matchedAttempt = {false};
  matchedSolution.resize(WORD_LENGTH);
  matchedAttempt.resize(WORD_LENGTH);

  // First pass: Green letters
  for (int i = 0; i < WORD_LENGTH; i++) {
    if (attempt[i] == solution[i]) {
      letter_color[attempt_counter][i] = GREEN_ID;
      matchedSolution[i] = true;
      matchedAttempt[i] = true;
    }
  }

  // Second pass: Yellow letters
  for (int i = 0; i < WORD_LENGTH; i++) {
    if (matchedAttempt[i])
      continue; // already green

    bool found_yellow = false;
    for (int j = 0; j < WORD_LENGTH; j++) {
      if (!matchedSolution[j] && attempt[i] == solution[j]) {
        letter_color[attempt_counter][i] = YELLOW_ID;
        matchedSolution[j] = true;
        found_yellow = true;
        break;
      }
    }
    if (!found_yellow) {
      letter_color[attempt_counter][i] = GREY_ID;
    }
  }
  attempt = \"\";
  word_position = 0;
  if (attempt_counter + 1 == AMOUNT_OF_WORDS) {
    lost = true;
    return;
  }
  attempt_counter++;
  enteredWords[attempt_counter][word_position] = \"_\";
}

void handle_input() {
  // Display player input
  if (current_key >= 'a' && current_key <= 'z' && word_position < WORD_LENGTH) {
    enteredWords[attempt_counter][word_position] =
        std::string(1, current_key - 32);
    current_key = 0; // reset key to not trigger spam
    word_position++;
    if (word_position < WORD_LENGTH) {
      enteredWords[attempt_counter][word_position] = '_';
    }
  }

  if (current_key == 32) {
    current_key = 0; // reset key to not trigger spam
    word_position++;
    if (word_position < WORD_LENGTH) {
      enteredWords[attempt_counter][word_position] = '_';
    }
  }

  if (backspace_pressed) {
    backspace_pressed = false; // reset immediately
    if (word_position > 0) {
      if (word_position < WORD_LENGTH) {
        enteredWords[attempt_counter][word_position] = \"\";
      }
      word_position--;
      enteredWords[attempt_counter][word_position] = '_';
    }
  }

  if (enter_pressed) {
    enter_pressed = false;
    if (word_position == WORD_LENGTH) {
      try_guess();
    } else {
      invalid_length_msg = true;
    }
  }
  if (tab_pressed) {
    if (show_menu) {
      tab_pressed = false;
      show_menu = false;
    } else if (!show_menu) {
      tab_pressed = false;
      show_menu = true;
    }
  }
  if (show_menu) {
    
  if (current_key == 49) {
    // 
  }
  if (current_key == 50) {
    // 
  }
  if (current_key == 51) {
    // 
  }
  }
}

std::string get_solution() { return solution; }

void setup_game() {
  solution = random_word();

  enteredWords.resize(AMOUNT_OF_WORDS);

  for (std::vector<std::string> &row : enteredWords) {
    row.resize(WORD_LENGTH);
  }

  letter_color.resize(AMOUNT_OF_WORDS);
  for (std::vector<int> &row : letter_color) {
    row.resize(WORD_LENGTH);
  }

  // intialize the board with one space
  for (int i = 0; i < AMOUNT_OF_WORDS; i++) {
    for (int j = 0; j < WORD_LENGTH; j++) {
      enteredWords[i][j] = \" \";
    }
  }
}

int won_code = 1;
int lost_code = 2;

int check_game_over() {
  if (won) {
    clear_screen();
    print_board(enteredWords, won_code);
    std::cout << \"You won!\\n\";
    return 0;
  } else if (lost) {
    clear_screen();
    print_board(enteredWords, lost_code);
    std::cout << \"You lost! The answer was: \" << solution << \"\\n\";
    return 0;
  }
  return 69;
}

int update_game() {
  clear_screen();
  print_board(enteredWords, 0);
  handle_input();
  clear_screen();
  print_board(enteredWords, 0);

  return check_game_over();
}
" 505 506 (category c-<-as-paren-syntax) 517 518 (category c-<-as-paren-syntax) 529 530 (category c->-as-paren-syntax) 530 531 (category c->-as-paren-syntax) 591 592 (category c-<-as-paren-syntax) 603 604 (category c-<-as-paren-syntax) 607 608 (category c->-as-paren-syntax) 608 609 (category c->-as-paren-syntax) 1690 1691 (category c-<-as-paren-syntax) 1695 1696 (category c->-as-paren-syntax) 1737 1738 (category c-<-as-paren-syntax) 1742 1743 (category c->-as-paren-syntax) 2606 2627 (fontified t) 2627 2629 (fontified t) 2629 2631 (face font-lock-keyword-face fontified t) 2631 2675 (fontified t) 2675 2686 (fontified t) 2686 2690 (face font-lock-constant-face fontified t) 2690 2692 (fontified t) 2692 2696 (fontified t) 2696 2702 (face font-lock-keyword-face fontified t) 2702 2704 (fontified t) 2704 2708 (fontified t) 2708 2729 (fontified t) 2729 2778 (fontified t) 2778 2781 (face font-lock-string-face fontified t) 2781 2783 (fontified t) 2783 2785 (fontified t) 2785 2786 (fontified t) 2786 2789 (face font-lock-type-face fontified t) 2789 2790 (face font-lock-type-face c-type c-decl-id-start fontified t) 2790 2791 (fontified t) 2791 2803 (face font-lock-function-name-face fontified t) 2803 2808 (fontified t) 2808 2810 (fontified t c-is-sws t c-in-sws t) 2810 2811 (face font-lock-comment-delimiter-face fontified t c-in-sws t c-is-sws t) 2811 2813 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 2813 2833 (face font-lock-comment-face fontified t c-in-sws t) 2833 2834 (face font-lock-comment-face fontified t c-in-sws t) 2834 2835 (c-in-sws t c-is-sws t fontified t) 2835 2836 (c-is-sws t fontified t c-in-sws t) 2836 2837 (face font-lock-keyword-face fontified t c-is-sws t) 2837 2838 (face font-lock-keyword-face fontified t) 2838 2855 (fontified t) 2855 2858 (face font-lock-string-face fontified t) 2858 2877 (fontified t) 2877 2880 (face font-lock-string-face fontified t) 2880 2915 (fontified t) 2915 2919 (fontified t) 2919 2966 (fontified t) 2966 2974 (fontified t) 2974 2977 (face font-lock-constant-face fontified t) 2977 3008 (fontified t) 3008 3028 (fontified t) 3028 3029 (fontified t c-is-sws t c-in-sws t) 3029 3030 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 3030 3032 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 3032 3061 (face font-lock-comment-face fontified t c-in-sws t) 3061 3062 (face font-lock-comment-face fontified t c-in-sws t) 3062 3063 (c-in-sws t c-is-sws t fontified t) 3063 3066 (c-in-sws t c-is-sws t fontified t) 3066 3067 (c-is-sws t fontified t) 3067 3087 (fontified t) 3087 3089 (face font-lock-keyword-face fontified t) 3089 3122 (fontified t) 3122 3175 (fontified t) 3175 3178 (face font-lock-string-face fontified t) 3178 3180 (fontified t) 3180 3186 (fontified t) 3186 3190 (fontified t) 3190 3191 (fontified t) 3191 3193 (fontified t) 3193 3195 (face font-lock-keyword-face fontified t) 3195 3238 (fontified t) 3238 3239 (fontified t c-is-sws t c-in-sws t) 3239 3240 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 3240 3242 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 3242 3272 (face font-lock-comment-face fontified t c-in-sws t) 3272 3276 (fontified t c-in-sws t c-is-sws t) 3276 3277 (fontified t c-is-sws t) 3277 3297 (fontified t) 3297 3299 (face font-lock-keyword-face fontified t) 3299 3385 (fontified t) 3385 3388 (face font-lock-string-face fontified t) 3388 3400 (fontified t) 3400 3401 (fontified t) 3401 3403 (fontified t) 3403 3405 (face font-lock-keyword-face fontified t) 3405 3452 (fontified t) 3452 3457 (face font-lock-constant-face fontified t) 3457 3458 (fontified t) 3458 3459 (fontified t c-is-sws t c-in-sws t) 3459 3460 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 3460 3462 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 3462 3480 (face font-lock-comment-face fontified t c-in-sws t) 3480 3484 (fontified t c-in-sws t c-is-sws t) 3484 3485 (face font-lock-keyword-face fontified t c-is-sws t) 3485 3486 (face font-lock-keyword-face fontified t) 3486 3515 (fontified t) 3515 3517 (face font-lock-keyword-face fontified t) 3517 3605 (fontified t) 3605 3607 (face font-lock-string-face fontified t) 3607 3693 (fontified t) 3693 3696 (face font-lock-string-face fontified t) 3696 3711 (fontified t) 3711 3713 (face font-lock-keyword-face fontified t) 3713 3752 (fontified t) 3752 3757 (face font-lock-constant-face fontified t) 3757 3763 (fontified t) 3763 3765 (face font-lock-keyword-face fontified t) 3765 3824 (fontified t) 3824 3828 (face font-lock-keyword-face fontified t) 3828 3858 (fontified t) 3858 3862 (face font-lock-constant-face fontified t) 3862 3876 (fontified t) 3876 3878 (face font-lock-keyword-face fontified t) 3878 3899 (fontified t) 3899 3901 (face font-lock-keyword-face fontified t) 3901 3936 (fontified t) 3936 3941 (face font-lock-constant-face fontified t) 3941 3961 (fontified t) 3961 3966 (face font-lock-constant-face fontified t) 3966 3974 (fontified t) 3974 3978 (face font-lock-keyword-face fontified t) 3978 3979 (fontified t) 3979 3981 (face font-lock-keyword-face fontified t) 3981 3983 (fontified t) 3983 3984 (face font-lock-negation-char-face fontified t) 3984 4017 (fontified t) 4017 4022 (face font-lock-constant-face fontified t) 4022 4042 (fontified t) 4042 4046 (face font-lock-constant-face fontified t) 4046 4054 (fontified t) 4054 4057 (fontified t) 4057 4058 (fontified t) 4058 4060 (fontified t) 4060 4061 (face font-lock-keyword-face fontified t) 4061 4062 (face font-lock-keyword-face fontified t) 4062 4063 (fontified t) 4063 4064 (fontified t) 4064 4073 (fontified t) 4073 4074 (fontified t) 4074 4075 (fontified t) 4075 4076 (fontified t) 4076 4077 (fontified t) 4077 4081 (fontified t) 4081 4082 (fontified t) 4082 4083 (fontified t) 4083 4084 (rear-nonsticky t fontified t) 4084 4085 (face font-lock-keyword-face fontified t) 4085 4086 (face font-lock-keyword-face fontified t) 4086 4087 (fontified t) 4087 4088 (fontified t) 4088 4099 (fontified t) 4099 4100 (fontified t) 4100 4101 (fontified t) 4101 4102 (fontified t) 4102 4103 (fontified t) 4103 4104 (fontified t) 4104 4105 (fontified t) 4105 4106 (fontified t) 4106 4107 (fontified t) 4107 4108 (fontified t) 4108 4109 (fontified t) 4109 4113 (fontified t c-is-sws t c-in-sws t) 4113 4114 (face font-lock-comment-delimiter-face fontified t c-in-sws t c-is-sws t) 4114 4115 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 4115 4116 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 4116 4117 (face font-lock-comment-face fontified t c-in-sws t) 4117 4118 (fontified t c-in-sws t c-is-sws t) 4118 4119 (fontified t c-is-sws t c-in-sws t) 4119 4120 (fontified t c-is-sws t) 4120 4121 (fontified t) 4121 4122 (fontified t) 4122 4123 (fontified t rear-nonsticky t) 4123 4124 (face font-lock-keyword-face fontified t) 4124 4125 (face font-lock-keyword-face fontified t) 4125 4126 (fontified t) 4126 4127 (fontified t) 4127 4138 (fontified t) 4138 4139 (fontified t) 4139 4140 (fontified t) 4140 4141 (fontified t) 4141 4142 (fontified t) 4142 4143 (fontified t) 4143 4144 (fontified t) 4144 4145 (fontified t) 4145 4146 (fontified t) 4146 4147 (fontified t) 4147 4148 (fontified t) 4148 4152 (fontified t c-is-sws t c-in-sws t) 4152 4153 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 4153 4154 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 4154 4155 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 4155 4156 (face font-lock-comment-face fontified t c-in-sws t) 4156 4157 (fontified t c-in-sws t c-is-sws t) 4157 4158 (fontified t c-in-sws t c-is-sws t) 4158 4159 (fontified t c-is-sws t) 4159 4160 (fontified t) 4160 4161 (fontified t) 4161 4162 (fontified t rear-nonsticky t) 4162 4163 (face font-lock-keyword-face fontified t) 4163 4164 (face font-lock-keyword-face fontified t) 4164 4165 (fontified t) 4165 4166 (fontified t) 4166 4177 (fontified t) 4177 4178 (fontified t) 4178 4179 (fontified t) 4179 4180 (fontified t) 4180 4181 (fontified t) 4181 4182 (fontified t) 4182 4183 (fontified t) 4183 4184 (fontified t) 4184 4185 (fontified t) 4185 4186 (fontified t) 4186 4187 (fontified t) 4187 4191 (fontified t c-is-sws t c-in-sws t) 4191 4192 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 4192 4193 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 4193 4194 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 4194 4195 (face font-lock-comment-face fontified t c-in-sws t) 4195 4196 (fontified t c-in-sws t c-is-sws t) 4196 4197 (fontified t c-in-sws t c-is-sws t) 4197 4198 (fontified t c-is-sws t) 4198 4199 (fontified t) 4199 4201 (fontified t) 4201 4202 (fontified t) 4202 4203 (fontified t) 4203 4204 (fontified t) 4204 4205 (fontified t) 4205 4206 (fontified t) 4206 4209 (face font-lock-constant-face fontified t) 4209 4211 (fontified t) 4211 4216 (face font-lock-type-face fontified t) 4216 4217 (face font-lock-type-face c-type c-decl-id-start fontified t) 4217 4218 (fontified t) 4218 4230 (face font-lock-function-name-face fontified t) 4230 4235 (fontified t) 4235 4241 (face font-lock-keyword-face fontified t) 4241 4255 (fontified t) 4255 4258 (face font-lock-type-face fontified t) 4258 4259 (face font-lock-type-face c-type c-decl-id-start fontified t) 4259 4260 (fontified t) 4260 4270 (face font-lock-function-name-face fontified t) 4270 4275 (fontified t) 4275 4347 (fontified t) 4347 4350 (face font-lock-keyword-face fontified t) 4350 4352 (fontified t) 4352 4355 (face font-lock-constant-face fontified t) 4355 4357 (fontified t) 4357 4363 (face font-lock-type-face fontified t) 4363 4364 (fontified t category c-<-as-paren-syntax) 4364 4367 (face font-lock-constant-face fontified t) 4367 4369 (fontified t) 4369 4375 (face font-lock-type-face fontified t) 4375 4376 (c-type c-decl-id-start fontified t category c->-as-paren-syntax) 4376 4378 (fontified t) 4378 4381 (face font-lock-variable-name-face fontified t) 4381 4476 (fontified t) 4476 4479 (face font-lock-keyword-face fontified t) 4479 4481 (fontified t) 4481 4484 (face font-lock-constant-face fontified t) 4484 4486 (fontified t) 4486 4492 (face font-lock-type-face fontified t) 4492 4493 (fontified t category c-<-as-paren-syntax) 4493 4496 (face font-lock-type-face fontified t) 4496 4497 (c-type c-decl-id-start fontified t category c->-as-paren-syntax) 4497 4499 (fontified t) 4499 4502 (face font-lock-variable-name-face fontified t) 4502 4555 (fontified t) 4555 4557 (fontified t c-is-sws t c-in-sws t) 4557 4558 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 4558 4560 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 4560 4595 (face font-lock-comment-face fontified t c-in-sws t) 4595 4597 (fontified t c-in-sws t c-is-sws t) 4597 4598 (face font-lock-keyword-face fontified t c-is-sws t) 4598 4600 (face font-lock-keyword-face fontified t) 4600 4602 (fontified t) 4602 4604 (face font-lock-type-face fontified t) 4604 4605 (face font-lock-type-face c-type c-decl-id-start fontified t) 4605 4606 (fontified t) 4606 4607 (face font-lock-variable-name-face fontified t) 4607 4645 (fontified t) 4645 4648 (face font-lock-keyword-face fontified t) 4648 4650 (fontified t) 4650 4652 (face font-lock-type-face fontified t) 4652 4653 (face font-lock-type-face c-type c-decl-id-start fontified t) 4653 4654 (fontified t) 4654 4655 (face font-lock-variable-name-face fontified t) 4655 4712 (fontified t) 4712 4715 (face font-lock-string-face fontified t) 4715 4730 (fontified t) 4730 4732 (face font-lock-type-face fontified t) 4732 4733 (face font-lock-type-face c-type c-decl-id-start fontified t) 4733 4734 (fontified t) 4734 4742 (face font-lock-variable-name-face fontified t) 4742 4748 (fontified t) 4748 4750 (face font-lock-type-face fontified t) 4750 4751 (face font-lock-type-face c-type c-decl-id-start fontified t) 4751 4752 (fontified t) 4752 4761 (face font-lock-variable-name-face fontified t) 4761 4768 (fontified t) 4768 4770 (face font-lock-type-face fontified t) 4770 4771 (face font-lock-type-face c-type c-decl-id-start fontified t) 4771 4772 (fontified t) 4772 4787 (face font-lock-function-name-face fontified t) 4787 4794 (fontified t) 4794 4796 (face font-lock-keyword-face fontified t) 4796 4836 (fontified t) 4836 4865 (fontified t) 4865 4870 (fontified t) 4870 4873 (face font-lock-constant-face fontified t) 4873 4883 (fontified t) 4883 4895 (face font-lock-string-face fontified t) 4895 4901 (fontified t) 4901 4907 (face font-lock-keyword-face fontified t) 4907 4915 (fontified t) 4915 4919 (face font-lock-keyword-face fontified t) 4919 4920 (fontified t) 4920 4922 (face font-lock-keyword-face fontified t) 4922 4994 (fontified t) 4994 4998 (fontified t) 4998 5001 (face font-lock-constant-face fontified t) 5001 5011 (fontified t) 5011 5039 (face font-lock-string-face fontified t) 5039 5042 (fontified t) 5042 5046 (fontified t) 5046 5055 (fontified t) 5055 5059 (face font-lock-string-face fontified t) 5059 5060 (fontified t) 5060 5061 (fontified t) 5061 5065 (fontified t) 5065 5071 (face font-lock-keyword-face fontified t) 5071 5081 (fontified t) 5081 5087 (face font-lock-keyword-face fontified t) 5087 5095 (fontified t) 5095 5097 (face font-lock-type-face fontified t) 5097 5098 (face font-lock-type-face c-type c-decl-id-start fontified t) 5098 5099 (fontified t) 5099 5110 (face font-lock-function-name-face fontified t) 5110 5236 (fontified t) 5236 5242 (face font-lock-keyword-face fontified t) 5242 5264 (fontified t)) . 1) (undo-tree-id558 . -30) (undo-tree-id559 . -4198) (undo-tree-id560 . -3272) (undo-tree-id561 . -4064) (undo-tree-id562 . 1149) (undo-tree-id563 . -4064) (undo-tree-id564 . -4064) (undo-tree-id565 . -4082) (undo-tree-id566 . 1065) (undo-tree-id567 . -4087) (undo-tree-id568 . -4120) (undo-tree-id569 . -4160) (undo-tree-id570 . -4198) (undo-tree-id571 . -3401) (undo-tree-id572 . -4182) (undo-tree-id573 . -4182) 4183) nil (26692 30112 746967 640000) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified t)) . 4078)) nil (26692 30112 746962 840000) 0 nil])
([nil nil ((4063 . 4068) (4061 . 4063) (4058 . 4061) 4055) nil (26692 30112 746962 92000) 0 nil])
([nil nil ((3881 . 3891) (#("I" 0 1 (face font-lock-comment-face c-in-sws t fontified t)) . -3881) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (#("G" 0 1 (c-in-sws t face font-lock-comment-face fontified t)) . -3882) (undo-tree-id550 . -1) (undo-tree-id551 . -1) 3883 (3882 . 3883) (3881 . 3882) (#("I" 0 1 (face font-lock-comment-face c-in-sws t fontified t)) . -3881) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (#("G" 0 1 (face font-lock-comment-face c-in-sws t fontified t)) . -3882) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (#("G" 0 1 (c-in-sws t face font-lock-comment-face fontified t)) . -3883) (undo-tree-id556 . -1) (undo-tree-id557 . -1) 3884 (3879 . 3884) (3877 . 3879) (3874 . 3877)) nil (26692 30112 746959 728000) 0 nil])
([nil nil ((4197 . 4198) (4193 . 4197) (4191 . 4193) (#(";" 0 1 (fontified t)) . -4191) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (#(";" 0 1 (fontified t)) . -4192) (undo-tree-id576 . -1) (undo-tree-id577 . -1) 4193 (4191 . 4193) (4187 . 4191) (4185 . 4187) (4181 . 4185) (4177 . 4181) (#("t" 0 1 (face font-lock-string-face fontified t)) . -4177) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -4178) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (#("p" 0 1 (face font-lock-string-face fontified t)) . -4179) (undo-tree-id582 . -1) (undo-tree-id583 . -1) 4180 (4161 . 4180) (4159 . 4161) (4155 . 4159) (#("u" 0 1 (fontified t)) . -4155) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) 4156 (4154 . 4156) (4143 . 4149) (#("    " 0 1 (c-in-sws t c-is-sws t fontified nil) 1 4 (c-in-sws t c-is-sws t fontified nil)) . 4143) (4151 . 4152) (4143 . 4147) (#("      " 0 1 (c-in-sws t c-is-sws t fontified nil) 1 6 (c-in-sws t c-is-sws t fontified nil)) . 4143) (undo-tree-id588 . -6) (4152 . 4153) (4149 . 4152) (4142 . 4149) (t 26692 30112 748973 666000)) nil (26692 30131 728761 122000) 0 nil])
([nil nil ((4372 . 4378) (4365 . 4372) (t 26692 30131 729973 593000)) nil (26692 30458 876512 732000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -4384) (undo-tree-id603 . -2) (undo-tree-id604 . -2) 4386 (4384 . 4386) (#("  " 0 2 (fontified nil)) . 4383) (undo-tree-id605 . -2) (undo-tree-id606 . -2) (4383 . 4386) (#("  " 0 2 (fontified nil)) . 4382) (undo-tree-id607 . -2) (undo-tree-id608 . -2) (4384 . 4385) (4381 . 4384)) nil (26692 30462 197734 670000) 0 nil])
([nil nil ((4398 . 4408) (#("wor" 0 3 (fontified nil)) . 4398) (4398 . 4401) (#("word_mode" 0 9 (fontified nil)) . 4398) (4398 . 4407) (#("wor" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 4398) (undo-tree-id701 . -3) (undo-tree-id702 . -3) (4399 . 4401) (#("ir" 0 1 (fontified nil) 1 2 (fontified nil)) . 4399) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (4384 . 4401) (#("WOR" 0 3 (fontified nil)) . 4384) (4384 . 4387) (#("WORD_LENGTH" 0 11 (fontified nil)) . 4384) (4384 . 4395) (#("WORD" 0 1 (face font-lock-type-face fontified nil) 1 2 (face font-lock-type-face fontified nil) 2 3 (face font-lock-type-face fontified nil) 3 4 (face font-lock-type-face fontified nil)) . 4384) (undo-tree-id705 . -4) (undo-tree-id706 . -4) (4382 . 4388)) ((#("  " 0 2 (fontified nil)) . 4382) (undo-tree-id609 . -2) (undo-tree-id610 . -2) (undo-tree-id611 . -2) (undo-tree-id612 . -2) (undo-tree-id613 . -2) (undo-tree-id614 . -2) (undo-tree-id616 . -2) (undo-tree-id618 . -2) (undo-tree-id620 . -2) (undo-tree-id622 . -2) (undo-tree-id624 . -2) (undo-tree-id626 . -2) (undo-tree-id628 . -2) (undo-tree-id630 . -2) (#("WORD" 0 1 (face font-lock-type-face fontified nil) 1 2 (face font-lock-type-face fontified nil) 2 3 (face font-lock-type-face fontified nil) 3 4 (face font-lock-type-face fontified nil)) . 4384) (undo-tree-id631 . -4) (undo-tree-id632 . -4) (4384 . 4388) (#("WORD_LENGTH" 0 11 (fontified nil)) . 4384) (4384 . 4395) (#("WOR" 0 3 (fontified nil)) . 4384) (4384 . 4387) (#("WORD_LENGTH" 0 10 (fontified nil) 10 11 (fontified nil)) . 4384) (undo-tree-id633 . -11) (undo-tree-id634 . -11) (undo-tree-id635 . -11) (undo-tree-id636 . -11) (undo-tree-id637 . -11) (undo-tree-id638 . -11) (undo-tree-id640 . -11) (undo-tree-id642 . -11) (undo-tree-id644 . -11) (undo-tree-id646 . -11) (undo-tree-id648 . -11) (undo-tree-id650 . -11) (undo-tree-id652 . -11) (undo-tree-id654 . -11) (#(" = wir" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil)) . 4395) (undo-tree-id655 . -3) (undo-tree-id656 . -5) (undo-tree-id657 . -3) (undo-tree-id658 . -5) (undo-tree-id659 . -3) (undo-tree-id660 . -3) (undo-tree-id662 . -3) (undo-tree-id664 . -3) (undo-tree-id666 . -3) (undo-tree-id668 . -3) (undo-tree-id670 . -3) (undo-tree-id672 . -3) (undo-tree-id674 . -3) (undo-tree-id676 . -3) (4399 . 4401) (#("o" 0 1 (fontified nil)) . 4399) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (#("r" 0 1 (fontified nil)) . 4400) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (4398 . 4401) (#("word_mode" 0 9 (fontified nil)) . 4398) (4398 . 4407) (#("wor" 0 3 (fontified nil)) . 4398) (4398 . 4401) (#("word_mode" 0 9 (fontified nil)) . 4398) (undo-tree-id681 . -9) (undo-tree-id682 . -9) (undo-tree-id683 . -9) (undo-tree-id684 . -9) (undo-tree-id686 . -9) (undo-tree-id688 . -9) (undo-tree-id690 . -9) (undo-tree-id692 . -9) (undo-tree-id694 . -9) (undo-tree-id696 . -9) (undo-tree-id698 . -9) (undo-tree-id700 . -9) (#(";" 0 1 (fontified t)) . 4407)) (26692 30463 342999 256000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 4409)) nil (26692 30466 540699 634000) 0 nil] [nil nil ((#(";" 0 1 (fontified t)) . 4407)) ((4407 . 4408)) (26692 30458 876495 93000) 0 nil])
([nil nil ((#("      std::cout << \"pressed first option\" << std::endl;
" 0 1 (c-in-sws t c-is-sws t fontified t) 1 6 (c-in-sws t c-is-sws t fontified t) 6 7 (face font-lock-constant-face c-is-sws t fontified t) 7 8 (face font-lock-constant-face fontified t) 8 9 (face font-lock-constant-face fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t) 19 20 (face font-lock-string-face fontified t) 20 21 (face font-lock-string-face fontified t) 21 22 (face font-lock-string-face fontified t) 22 23 (face font-lock-string-face fontified t) 23 24 (face font-lock-string-face fontified t) 24 25 (face font-lock-string-face fontified t) 25 26 (face font-lock-string-face fontified t) 26 27 (face font-lock-string-face fontified t) 27 28 (face font-lock-string-face fontified t) 28 29 (face font-lock-string-face fontified t) 29 30 (face font-lock-string-face fontified t) 30 31 (face font-lock-string-face fontified t) 31 32 (face font-lock-string-face fontified t) 32 33 (face font-lock-string-face fontified t) 33 34 (face font-lock-string-face fontified t) 34 35 (face font-lock-string-face fontified t) 35 36 (face font-lock-string-face fontified t) 36 37 (face font-lock-string-face fontified t) 37 38 (face font-lock-string-face fontified t) 38 39 (face font-lock-string-face fontified t) 39 40 (face font-lock-string-face fontified t) 40 41 (face font-lock-string-face fontified t) 41 42 (fontified t) 42 43 (fontified t) 43 44 (fontified t) 44 45 (fontified t) 45 46 (face font-lock-constant-face fontified t) 46 47 (face font-lock-constant-face fontified t) 47 48 (face font-lock-constant-face fontified t) 48 49 (fontified t) 49 50 (fontified t) 50 51 (fontified t) 51 52 (fontified t) 52 53 (fontified t) 53 54 (fontified t) 54 55 (fontified t) 55 56 (fontified t)) . 4143) (undo-tree-id728 . -7) 4150 (t 26692 30466 541972 316000)) nil (26692 30579 963960 500000) 0 nil])
nil
([nil nil ((#("      //
" 0 6 (c-is-sws t c-in-sws t fontified t) 6 7 (face font-lock-comment-delimiter-face fontified t c-in-sws t c-is-sws t) 7 8 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 8 9 (c-in-sws t face font-lock-comment-face fontified t)) . 4134) (undo-tree-id727 . -6) 4140) nil (26692 30579 963960 23000) 0 nil])
([nil nil ((4153 . 4154) (#("p" 0 1 (fontified t)) . -4153) (undo-tree-id721 . -1) (undo-tree-id722 . -1) 4154 (4153 . 4154) (4152 . 4153) (4151 . 4152) (4150 . 4151) (4140 . 4150) (#("set" 0 3 (fontified nil)) . 4140) (4140 . 4143) (#("setup_game" 0 10 (fontified nil)) . -4140) (4140 . 4150) (#("set" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -4140) (undo-tree-id723 . -3) (undo-tree-id724 . -3) (undo-tree-id725 . -3) (undo-tree-id726 . -3) 4143 (4140 . 4143) (4133 . 4140) 4109) nil (26692 30579 963959 86000) 0 nil])
([nil nil ((#("/" 0 1 (c-in-sws t face font-lock-comment-delimiter-face fontified t)) . 4197)) nil (26692 30579 963956 857000) 0 nil])
([nil nil ((4210 . 4211) (4209 . 4210) (4208 . 4209) (4207 . 4208) (#("*" 0 1 (fontified t)) . -4207) (undo-tree-id712 . -1) (undo-tree-id713 . -1) 4208 (4207 . 4208) (4196 . 4207) (#("setup" 0 5 (fontified nil)) . 4196) (4196 . 4201) (#("setup_input" 0 11 (fontified nil)) . -4196) (4196 . 4207) (#("setup" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . -4196) (undo-tree-id714 . -5) (undo-tree-id715 . -5) (undo-tree-id716 . -5) (undo-tree-id717 . -5) 4201 (4196 . 4201) (4190 . 4196) (4190 . 4191) (#("      /
" 0 6 (c-is-sws t c-in-sws t fontified t) 6 7 (c-is-sws t c-in-sws t fontified t) 7 8 (fontified t)) . 4190) (undo-tree-id718 . 1) (undo-tree-id719 . -7) (undo-tree-id720 . -6) 4196) nil (26692 30579 963956 109000) 0 nil])
([nil nil ((4202 . 4206) (#("input" 0 5 (fontified t)) . 4202)) nil (26692 30579 963952 369000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4251 . 4252) (4246 . 4267) 4255 (#("      //
" 0 6 (c-is-sws t c-in-sws t fontified t) 6 7 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 7 8 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 8 9 (c-in-sws t face font-lock-comment-face fontified t)) . 4246) (undo-tree-id707 . -9) (undo-tree-id708 . -7) (undo-tree-id709 . -7) (undo-tree-id710 . -3) (undo-tree-id711 . -7) 4255) nil (26692 30579 963951 437000) 0 nil])
([nil nil ((4263 . 4264) (#("6" 0 1 (fontified t)) . 4263)) nil (26692 30579 963941 71000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4418 . 4419) (#("
" 0 1 (fontified nil)) . -4441) (4418 . 4442) (t 26692 30579 965971 883000)) nil (26692 30694 778512 111000) 0 nil])
([nil nil ((4443 . 4444) (4441 . 4443)) nil (26692 30694 778511 838000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t)) . 4443) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1)) nil (26692 30694 778511 483000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-type-face fontified t)) . 4419)) nil (26692 30694 778510 358000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-type-face fontified t)) . 4419)) nil (26692 30694 778509 771000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-type-face c-type c-decl-id-start fontified t)) . 4419)) nil (26692 30694 778509 528000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 4419)) nil (26692 30694 778509 277000) 0 nil])
([nil nil ((4419 . 4421)) nil (26692 30694 778509 88000) 0 nil])
([nil nil ((4461 . 4462) (4460 . 4461) (#("9" 0 1 (fontified t)) . -4460) (undo-tree-id783 . -1) (undo-tree-id784 . -1) 4461 (4458 . 4461) (#("-" 0 1 (fontified t)) . -4458) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (#("-" 0 1 (fontified t)) . -4459) (undo-tree-id787 . -1) (undo-tree-id788 . -1) 4460 (4457 . 4460) (4442 . 4457) (#("at" 0 2 (fontified nil)) . 4442) (4442 . 4444) (#("attempt_counter" 0 15 (fontified nil)) . -4442) (4442 . 4457) (#("at" 0 1 (fontified t) 1 2 (fontified t)) . -4442) (undo-tree-id789 . -2) (undo-tree-id790 . -2) (undo-tree-id791 . -2) (undo-tree-id792 . -2) 4444 (4442 . 4444) (4439 . 4442)) nil (26692 30694 778508 233000) 0 nil])
([nil nil ((1 . 5424) (#("#include \"../include/game.hpp\"
#include \"../include/terminal_input.hpp\"
#include \"../include/utils.hpp\"
#include \"../include/visuals.hpp\"
#include \"../include/word_machine.hpp\"
#include <cctype>
#include <iostream>
#include <string>
#include <unistd.h> // For usleep
#include <vector>
// WORDLE

int WORD_LENGTH = 5;
int AMOUNT_OF_WORDS = 6;

char cursor_char = '_';

int word_position = 0;
bool won = false;
bool lost = false;

std::string solution;
// Stores the letters which get visualized
std::vector<std::vector<std::string>> enteredWords;

// Array needed for colorization
std::vector<std::vector<int>> letter_color;

std::string attempt = \"\";

// Dictates the current row
int attempt_counter = 0;

constexpr int GREEN_ID = 1;
constexpr int YELLOW_ID = 2;
constexpr int GREY_ID = 3;

bool invalid_word_msg = false;
bool invalid_length_msg = false;
bool show_menu = false;

void try_guess() {
  //
  for (int i = 0; i < WORD_LENGTH; i++) {
    if (!enteredWords[attempt_counter][i].empty()) {
      attempt += std::tolower(enteredWords[attempt_counter][i][0]);
    } else {
      attempt += cursor_char; // or some sentinel char
    }
  }
  if (WORD_LENGTH == 5) {
    if (acceptableWords5.count(attempt) == 0) {
      invalid_word_msg = true;
      attempt = \"\";
      return;
    }

  } else if (WORD_LENGTH == 6) {
    if (acceptableWords6.count(attempt) == 0) {
      invalid_word_msg = true;
      attempt = \"\";
      return;
    }
  } else if (WORD_LENGTH == 7) {
    if (acceptableWords7.count(attempt) == 0) {
      invalid_word_msg = true;
      attempt = \"\";
      return;
    }
  }
  if (attempt == solution) {
    won = true;
  }
  // Track matched positions
  std::vector<bool> matchedSolution = {false};
  std::vector<bool> matchedAttempt = {false};
  matchedSolution.resize(WORD_LENGTH);
  matchedAttempt.resize(WORD_LENGTH);

  // First pass: Green letters
  for (int i = 0; i < WORD_LENGTH; i++) {
    if (attempt[i] == solution[i]) {
      letter_color[attempt_counter][i] = GREEN_ID;
      matchedSolution[i] = true;
      matchedAttempt[i] = true;
    }
  }

  // Second pass: Yellow letters
  for (int i = 0; i < WORD_LENGTH; i++) {
    if (matchedAttempt[i])
      continue; // already green

    bool found_yellow = false;
    for (int j = 0; j < WORD_LENGTH; j++) {
      if (!matchedSolution[j] && attempt[i] == solution[j]) {
        letter_color[attempt_counter][i] = YELLOW_ID;
        matchedSolution[j] = true;
        found_yellow = true;
        break;
      }
    }
    if (!found_yellow) {
      letter_color[attempt_counter][i] = GREY_ID;
    }
  }
  attempt = \"\";
  word_position = 0;
  if (attempt_counter + 1 == AMOUNT_OF_WORDS) {
    lost = true;
    return;
  }
  attempt_counter++;
  enteredWords[attempt_counter][word_position] = \"_\";
}

void handle_input() {
  // Display player input
  if (current_key >= 'a' && current_key <= 'z' && word_position < WORD_LENGTH) {
    enteredWords[attempt_counter][word_position] =
        std::string(1, current_key - 32);
    current_key = 0; // reset key to not trigger spam
    word_position++;
    if (word_position < WORD_LENGTH) {
      enteredWords[attempt_counter][word_position] = '_';
    }
  }

  if (current_key == 32) {
    current_key = 0; // reset key to not trigger spam
    word_position++;
    if (word_position < WORD_LENGTH) {
      enteredWords[attempt_counter][word_position] = '_';
    }
  }

  if (backspace_pressed) {
    backspace_pressed = false; // reset immediately
    if (word_position > 0) {
      if (word_position < WORD_LENGTH) {
        enteredWords[attempt_counter][word_position] = \"\";
      }
      word_position--;
      enteredWords[attempt_counter][word_position] = '_';
    }
  }

  if (enter_pressed) {
    enter_pressed = false;
    if (word_position == WORD_LENGTH) {
      try_guess();
    } else {
      invalid_length_msg = true;
    }
  }
  // TOGGLE MENU
  if (tab_pressed) {
    if (show_menu) {
      tab_pressed = false;
      show_menu = false;
    } else if (!show_menu) {
      tab_pressed = false;
      show_menu = true;
    }
  }
  // MENU
  if (show_menu) {
    if (current_key == 49) {
      setup_game(5);
    }
    if (current_key == 50) {
      setup_game(6);
    }
    if (current_key == 51) {
      setup_game(7);
    }
  }
}

std::string get_solution() { return solution; }

void setup_game(int word_mode) {
  WORD_LENGTH = word_mode;

  solution = random_word();

  word_position = 0;
  attempt_counter = 0;
 
  enteredWords.resize(AMOUNT_OF_WORDS);

  for (std::vector<std::string> &row : enteredWords) {
    row.resize(WORD_LENGTH);
  }

  letter_color.resize(AMOUNT_OF_WORDS);
  for (std::vector<int> &row : letter_color) {
    row.resize(WORD_LENGTH);
  }

  // intialize the board with one space
  for (int i = 0; i < AMOUNT_OF_WORDS; i++) {
    for (int j = 0; j < WORD_LENGTH; j++) {
      enteredWords[i][j] = \" \";
    }
  }
}

int won_code = 1;
int lost_code = 2;

int check_game_over() {
  if (won) {
    clear_screen();
    print_board(enteredWords, won_code);
    std::cout << \"You won!\\n\";
    return 0;
  } else if (lost) {
    clear_screen();
    print_board(enteredWords, lost_code);
    std::cout << \"You lost! The answer was: \" << solution << \"\\n\";
    return 0;
  }
  return 69;
}

int update_game() {
  clear_screen();
  print_board(enteredWords, 0);
  handle_input();
  clear_screen();
  print_board(enteredWords, 0);

  return check_game_over();
}
" 0 1 (fontified t c-in-sws t c-is-sws t face font-lock-preprocessor-face) 1 8 (fontified t c-in-sws t face font-lock-preprocessor-face) 8 9 (fontified t c-in-sws t) 9 17 (fontified t c-in-sws t face font-lock-string-face) 17 30 (c-in-sws t face font-lock-string-face fontified t) 30 31 (c-in-sws t fontified t) 31 32 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 32 39 (c-in-sws t face font-lock-preprocessor-face fontified t) 39 40 (c-in-sws t fontified t) 40 71 (c-in-sws t face font-lock-string-face fontified t) 71 72 (c-in-sws t fontified t) 72 73 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 73 80 (c-in-sws t face font-lock-preprocessor-face fontified t) 80 81 (c-in-sws t fontified t) 81 103 (c-in-sws t face font-lock-string-face fontified t) 103 104 (c-in-sws t fontified t) 104 105 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 105 112 (c-in-sws t face font-lock-preprocessor-face fontified t) 112 113 (c-in-sws t fontified t) 113 137 (c-in-sws t face font-lock-string-face fontified t) 137 138 (c-in-sws t fontified t) 138 139 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 139 146 (c-in-sws t face font-lock-preprocessor-face fontified t) 146 147 (c-in-sws t fontified t) 147 176 (c-in-sws t face font-lock-string-face fontified t) 176 177 (c-in-sws t fontified t) 177 178 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 178 185 (c-in-sws t face font-lock-preprocessor-face fontified t) 185 186 (c-in-sws t fontified t) 186 187 (c-in-sws t category c-<-as-paren-syntax face font-lock-string-face fontified t) 187 193 (c-in-sws t face font-lock-string-face fontified t) 193 194 (c-in-sws t category c->-as-paren-syntax face font-lock-string-face fontified t) 194 195 (c-in-sws t fontified t) 195 196 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 196 203 (c-in-sws t face font-lock-preprocessor-face fontified t) 203 204 (c-in-sws t fontified t) 204 205 (c-in-sws t category c-<-as-paren-syntax face font-lock-string-face fontified t) 205 213 (c-in-sws t face font-lock-string-face fontified t) 213 214 (c-in-sws t category c->-as-paren-syntax face font-lock-string-face fontified t) 214 215 (c-in-sws t fontified t) 215 216 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 216 223 (c-in-sws t face font-lock-preprocessor-face fontified t) 223 224 (c-in-sws t fontified t) 224 225 (c-in-sws t category c-<-as-paren-syntax face font-lock-string-face fontified t) 225 231 (c-in-sws t face font-lock-string-face fontified t) 231 232 (c-in-sws t category c->-as-paren-syntax face font-lock-string-face fontified t) 232 233 (c-in-sws t fontified t) 233 234 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 234 241 (c-in-sws t face font-lock-preprocessor-face fontified t) 241 242 (c-in-sws t fontified t) 242 243 (c-in-sws t category c-<-as-paren-syntax face font-lock-string-face fontified t) 243 251 (c-in-sws t face font-lock-string-face fontified t) 251 252 (c-in-sws t category c->-as-paren-syntax face font-lock-string-face fontified t) 252 253 (c-in-sws t fontified t) 253 256 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 256 267 (c-in-sws t face font-lock-comment-face fontified t) 267 268 (c-in-sws t c-is-sws t face font-lock-preprocessor-face fontified t) 268 275 (c-in-sws t face font-lock-preprocessor-face fontified t) 275 276 (c-in-sws t fontified t) 276 277 (c-in-sws t category c-<-as-paren-syntax face font-lock-string-face fontified t) 277 283 (c-in-sws t face font-lock-string-face fontified t) 283 284 (c-in-sws t category c->-as-paren-syntax face font-lock-string-face fontified t) 284 285 (c-in-sws t fontified t) 285 286 (c-in-sws t c-is-sws t face font-lock-comment-delimiter-face fontified t) 286 288 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 288 295 (c-in-sws t face font-lock-comment-face fontified t) 295 296 (c-in-sws t fontified t) 296 297 (face font-lock-type-face c-is-sws t fontified t) 297 298 (face font-lock-type-face fontified t) 298 299 (face font-lock-type-face c-type c-decl-id-start fontified t) 299 300 (fontified t) 300 311 (face font-lock-variable-name-face fontified t) 311 317 (fontified t) 317 319 (face font-lock-type-face fontified t) 319 320 (face font-lock-type-face c-type c-decl-id-start fontified t) 320 321 (fontified t) 321 336 (face font-lock-variable-name-face fontified t) 336 343 (fontified t) 343 346 (face font-lock-type-face fontified t) 346 347 (face font-lock-type-face c-type c-decl-id-start fontified t) 347 348 (fontified t) 348 359 (face font-lock-variable-name-face fontified t) 359 362 (fontified t) 362 365 (face font-lock-string-face fontified t) 365 368 (fontified t) 368 370 (face font-lock-type-face fontified t) 370 371 (face font-lock-type-face c-type c-decl-id-start fontified t) 371 372 (fontified t) 372 385 (face font-lock-variable-name-face fontified t) 385 391 (fontified t) 391 394 (face font-lock-type-face fontified t) 394 395 (face font-lock-type-face c-type c-decl-id-start fontified t) 395 396 (fontified t) 396 399 (face font-lock-variable-name-face fontified t) 399 402 (fontified t) 402 407 (face font-lock-constant-face fontified t) 407 409 (fontified t) 409 412 (face font-lock-type-face fontified t) 412 413 (face font-lock-type-face c-type c-decl-id-start fontified t) 413 414 (fontified t) 414 418 (face font-lock-variable-name-face fontified t) 418 421 (fontified t) 421 426 (face font-lock-constant-face fontified t) 426 429 (fontified t) 429 432 (face font-lock-constant-face fontified t) 432 434 (fontified t) 434 439 (face font-lock-type-face fontified t) 439 440 (face font-lock-type-face c-type c-decl-id-start fontified t) 440 441 (fontified t) 441 449 (face font-lock-variable-name-face fontified t) 449 451 (fontified t) 451 452 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 452 454 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 454 494 (c-in-sws t face font-lock-comment-face fontified t) 494 495 (c-is-sws t face font-lock-constant-face fontified t) 495 497 (face font-lock-constant-face fontified t) 497 499 (fontified t) 499 505 (face font-lock-type-face fontified t) 505 506 (fontified t category c-<-as-paren-syntax) 506 509 (face font-lock-constant-face fontified t) 509 511 (fontified t) 511 517 (face font-lock-type-face fontified t) 517 518 (fontified t category c-<-as-paren-syntax) 518 521 (face font-lock-constant-face fontified t) 521 523 (fontified t) 523 529 (face font-lock-type-face fontified t) 529 530 (fontified t category c->-as-paren-syntax) 530 531 (c-type c-decl-id-start fontified t category c->-as-paren-syntax) 531 532 (fontified t) 532 544 (face font-lock-variable-name-face fontified t) 544 547 (fontified t) 547 548 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 548 550 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 550 580 (c-in-sws t face font-lock-comment-face fontified t) 580 581 (c-is-sws t face font-lock-constant-face fontified t) 581 583 (face font-lock-constant-face fontified t) 583 585 (fontified t) 585 591 (face font-lock-type-face fontified t) 591 592 (fontified t category c-<-as-paren-syntax) 592 595 (face font-lock-constant-face fontified t) 595 597 (fontified t) 597 603 (face font-lock-type-face fontified t) 603 604 (fontified t category c-<-as-paren-syntax) 604 607 (face font-lock-type-face fontified t) 607 608 (fontified t category c->-as-paren-syntax) 608 609 (c-type c-decl-id-start fontified t category c->-as-paren-syntax) 609 610 (fontified t) 610 622 (face font-lock-variable-name-face fontified t) 622 625 (fontified t) 625 628 (face font-lock-constant-face fontified t) 628 630 (fontified t) 630 635 (face font-lock-type-face fontified t) 635 636 (face font-lock-type-face c-type c-decl-id-start fontified t) 636 637 (fontified t) 637 644 (face font-lock-variable-name-face fontified t) 644 647 (fontified t) 647 649 (face font-lock-string-face fontified t) 649 652 (fontified t) 652 653 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 653 655 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 655 680 (c-in-sws t face font-lock-comment-face fontified t) 680 681 (face font-lock-type-face c-is-sws t fontified t) 681 682 (face font-lock-type-face fontified t) 682 683 (face font-lock-type-face c-type c-decl-id-start fontified t) 683 684 (fontified t) 684 699 (face font-lock-variable-name-face fontified t) 699 706 (fontified t) 706 715 (face font-lock-keyword-face fontified t) 715 716 (fontified t) 716 718 (face font-lock-type-face fontified t) 718 719 (face font-lock-type-face c-type c-decl-id-start fontified t) 719 720 (fontified t) 720 728 (face font-lock-variable-name-face fontified t) 728 734 (fontified t) 734 743 (face font-lock-keyword-face fontified t) 743 744 (fontified t) 744 746 (face font-lock-type-face fontified t) 746 747 (face font-lock-type-face c-type c-decl-id-start fontified t) 747 748 (fontified t) 748 757 (face font-lock-variable-name-face fontified t) 757 763 (fontified t) 763 772 (face font-lock-keyword-face fontified t) 772 773 (fontified t) 773 775 (face font-lock-type-face fontified t) 775 776 (face font-lock-type-face c-type c-decl-id-start fontified t) 776 777 (fontified t) 777 784 (face font-lock-variable-name-face fontified t) 784 791 (fontified t) 791 794 (face font-lock-type-face fontified t) 794 795 (face font-lock-type-face c-type c-decl-id-start fontified t) 795 796 (fontified t) 796 812 (face font-lock-variable-name-face fontified t) 812 815 (fontified t) 815 820 (face font-lock-constant-face fontified t) 820 822 (fontified t) 822 825 (face font-lock-type-face fontified t) 825 826 (face font-lock-type-face c-type c-decl-id-start fontified t) 826 827 (fontified t) 827 845 (face font-lock-variable-name-face fontified t) 845 848 (fontified t) 848 853 (face font-lock-constant-face fontified t) 853 855 (fontified t) 855 858 (face font-lock-type-face fontified t) 858 859 (face font-lock-type-face c-type c-decl-id-start fontified t) 859 860 (fontified t) 860 869 (face font-lock-variable-name-face fontified t) 869 872 (fontified t) 872 877 (face font-lock-constant-face fontified t) 877 880 (fontified t) 880 883 (face font-lock-type-face fontified t) 883 884 (face font-lock-type-face c-type c-decl-id-start fontified t) 884 885 (fontified t) 885 894 (face font-lock-function-name-face fontified t) 894 899 (fontified t) 899 901 (c-is-sws t c-in-sws t fontified t) 901 902 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 902 903 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 903 904 (c-in-sws t face font-lock-comment-face fontified t) 904 906 (c-in-sws t c-is-sws t fontified t) 906 907 (c-is-sws t face font-lock-keyword-face fontified t) 907 909 (face font-lock-keyword-face fontified t) 909 911 (fontified t) 911 913 (face font-lock-type-face fontified t) 913 914 (face font-lock-type-face c-type c-decl-id-start fontified t) 914 915 (fontified t) 915 916 (face font-lock-variable-name-face fontified t) 916 950 (fontified t) 950 952 (face font-lock-keyword-face fontified t) 952 954 (fontified t) 954 955 (face font-lock-negation-char-face fontified t) 955 1016 (fontified t) 1016 1019 (face font-lock-constant-face fontified t) 1019 1073 (fontified t) 1073 1077 (face font-lock-keyword-face fontified t) 1077 1110 (fontified t) 1110 1113 (face font-lock-comment-delimiter-face fontified t) 1113 1135 (face font-lock-comment-face fontified t) 1135 1147 (fontified t) 1147 1149 (face font-lock-keyword-face fontified t) 1149 1175 (fontified t) 1175 1177 (face font-lock-keyword-face fontified t) 1177 1244 (fontified t) 1244 1248 (face font-lock-constant-face fontified t) 1248 1266 (fontified t) 1266 1268 (face font-lock-string-face fontified t) 1268 1276 (fontified t) 1276 1282 (face font-lock-keyword-face fontified t) 1282 1295 (fontified t) 1295 1299 (face font-lock-keyword-face fontified t) 1299 1300 (fontified t) 1300 1302 (face font-lock-keyword-face fontified t) 1302 1328 (fontified t) 1328 1330 (face font-lock-keyword-face fontified t) 1330 1397 (fontified t) 1397 1401 (face font-lock-constant-face fontified t) 1401 1419 (fontified t) 1419 1421 (face font-lock-string-face fontified t) 1421 1429 (fontified t) 1429 1435 (face font-lock-keyword-face fontified t) 1435 1447 (fontified t) 1447 1451 (face font-lock-keyword-face fontified t) 1451 1452 (fontified t) 1452 1454 (face font-lock-keyword-face fontified t) 1454 1480 (fontified t) 1480 1482 (face font-lock-keyword-face fontified t) 1482 1517 (fontified t) 1517 1524 (fontified t) 1524 1549 (fontified t) 1549 1553 (face font-lock-constant-face fontified t) 1553 1571 (fontified t) 1571 1573 (face font-lock-string-face fontified t) 1573 1581 (fontified t) 1581 1587 (face font-lock-keyword-face fontified t) 1587 1601 (fontified t) 1601 1603 (face font-lock-keyword-face fontified t) 1603 1638 (fontified t) 1638 1642 (face font-lock-constant-face fontified t) 1642 1648 (fontified t) 1648 1650 (c-is-sws t c-in-sws t fontified t) 1650 1651 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 1651 1653 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 1653 1677 (c-in-sws t face font-lock-comment-face fontified t) 1677 1679 (c-in-sws t c-is-sws t fontified t) 1679 1680 (c-is-sws t face font-lock-constant-face fontified t) 1680 1682 (face font-lock-constant-face fontified t) 1682 1684 (fontified t) 1684 1690 (face font-lock-type-face fontified t) 1690 1691 (fontified t category c-<-as-paren-syntax) 1691 1695 (face font-lock-type-face fontified t) 1695 1696 (c-type c-decl-id-start fontified t category c->-as-paren-syntax) 1696 1697 (fontified t) 1697 1712 (face font-lock-variable-name-face fontified t) 1712 1715 (fontified t) 1715 1716 (c-type c-not-decl fontified t) 1716 1721 (face font-lock-constant-face fontified t) 1721 1726 (fontified t) 1726 1729 (face font-lock-constant-face fontified t) 1729 1731 (fontified t) 1731 1737 (face font-lock-type-face fontified t) 1737 1738 (fontified t category c-<-as-paren-syntax) 1738 1742 (face font-lock-type-face fontified t) 1742 1743 (c-type c-decl-id-start fontified t category c->-as-paren-syntax) 1743 1744 (fontified t) 1744 1758 (face font-lock-variable-name-face fontified t) 1758 1761 (fontified t) 1761 1762 (c-type c-not-decl fontified t) 1762 1767 (face font-lock-constant-face fontified t) 1767 1848 (fontified t) 1848 1850 (c-is-sws t c-in-sws t fontified t) 1850 1851 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 1851 1853 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 1853 1879 (c-in-sws t face font-lock-comment-face fontified t) 1879 1881 (c-in-sws t c-is-sws t fontified t) 1881 1882 (c-is-sws t face font-lock-keyword-face fontified t) 1882 1884 (face font-lock-keyword-face fontified t) 1884 1886 (fontified t) 1886 1888 (face font-lock-type-face fontified t) 1888 1889 (face font-lock-type-face c-type c-decl-id-start fontified t) 1889 1890 (fontified t) 1890 1891 (face font-lock-variable-name-face fontified t) 1891 1925 (fontified t) 1925 1927 (face font-lock-keyword-face fontified t) 1927 2036 (fontified t) 2036 2040 (face font-lock-constant-face fontified t) 2040 2068 (fontified t) 2068 2072 (face font-lock-constant-face fontified t) 2072 2087 (fontified t) 2087 2090 (face font-lock-comment-delimiter-face fontified t) 2090 2118 (face font-lock-comment-face fontified t) 2118 2120 (fontified t) 2120 2123 (face font-lock-keyword-face fontified t) 2123 2125 (fontified t) 2125 2127 (face font-lock-type-face fontified t) 2127 2128 (face font-lock-type-face c-type c-decl-id-start fontified t) 2128 2129 (fontified t) 2129 2130 (face font-lock-variable-name-face fontified t) 2130 2164 (fontified t) 2164 2166 (face font-lock-keyword-face fontified t) 2166 2193 (fontified t) 2193 2201 (face font-lock-keyword-face fontified t) 2201 2202 (fontified t) 2202 2203 (c-is-sws t c-in-sws t fontified t) 2203 2204 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 2204 2206 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 2206 2220 (c-in-sws t face font-lock-comment-face fontified t) 2220 2221 (c-in-sws t fontified t) 2221 2225 (c-in-sws t c-is-sws t fontified t) 2225 2226 (face font-lock-type-face c-is-sws t fontified t) 2226 2228 (face font-lock-type-face fontified t) 2228 2229 (face font-lock-type-face c-type c-decl-id-start fontified t) 2229 2230 (fontified t) 2230 2242 (face font-lock-variable-name-face fontified t) 2242 2245 (fontified t) 2245 2250 (face font-lock-constant-face fontified t) 2250 2256 (fontified t) 2256 2259 (face font-lock-keyword-face fontified t) 2259 2261 (fontified t) 2261 2263 (face font-lock-type-face fontified t) 2263 2264 (face font-lock-type-face c-type c-decl-id-start fontified t) 2264 2265 (fontified t) 2265 2266 (face font-lock-variable-name-face fontified t) 2266 2302 (fontified t) 2302 2304 (face font-lock-keyword-face fontified t) 2304 2306 (fontified t) 2306 2307 (face font-lock-negation-char-face fontified t) 2307 2441 (fontified t) 2441 2445 (face font-lock-constant-face fontified t) 2445 2470 (fontified t) 2470 2474 (face font-lock-constant-face fontified t) 2474 2484 (fontified t) 2484 2489 (face font-lock-keyword-face fontified t) 2489 2509 (fontified t) 2509 2511 (face font-lock-keyword-face fontified t) 2511 2513 (fontified t) 2513 2514 (face font-lock-negation-char-face fontified t) 2514 2602 (fontified t) 2602 2604 (face font-lock-string-face fontified t) 2604 2629 (fontified t) 2629 2631 (face font-lock-keyword-face fontified t) 2631 2686 (fontified t) 2686 2690 (face font-lock-constant-face fontified t) 2690 2696 (fontified t) 2696 2702 (face font-lock-keyword-face fontified t) 2702 2778 (fontified t) 2778 2781 (face font-lock-string-face fontified t) 2781 2786 (fontified t) 2786 2789 (face font-lock-type-face fontified t) 2789 2790 (face font-lock-type-face c-type c-decl-id-start fontified t) 2790 2791 (fontified t) 2791 2803 (face font-lock-function-name-face fontified t) 2803 2810 (fontified t) 2810 2811 (face font-lock-comment-delimiter-face fontified t c-in-sws t c-is-sws t) 2811 2813 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 2813 2834 (face font-lock-comment-face fontified t c-in-sws t) 2834 2836 (fontified t c-in-sws t) 2836 2837 (face font-lock-keyword-face fontified t c-is-sws t) 2837 2838 (face font-lock-keyword-face fontified t) 2838 2855 (fontified t) 2855 2858 (face font-lock-string-face fontified t) 2858 2877 (fontified t) 2877 2880 (face font-lock-string-face fontified t) 2880 2974 (fontified t) 2974 2977 (face font-lock-constant-face fontified t) 2977 3008 (fontified t) 3008 3024 (fontified t) 3024 3025 (fontified t) 3025 3028 (fontified t) 3028 3029 (c-is-sws t c-in-sws t fontified t) 3029 3030 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 3030 3032 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 3032 3062 (c-in-sws t face font-lock-comment-face fontified t) 3062 3066 (c-in-sws t c-is-sws t fontified t) 3066 3067 (c-is-sws t fontified t) 3067 3087 (fontified t) 3087 3089 (face font-lock-keyword-face fontified t) 3089 3175 (fontified t) 3175 3178 (face font-lock-string-face fontified t) 3178 3191 (fontified t) 3191 3193 (fontified t) 3193 3195 (face font-lock-keyword-face fontified t) 3195 3238 (fontified t) 3238 3239 (c-is-sws t c-in-sws t fontified t) 3239 3240 (c-is-sws t c-in-sws t face font-lock-comment-delimiter-face fontified t) 3240 3242 (c-in-sws t face font-lock-comment-delimiter-face fontified t) 3242 3272 (c-in-sws t face font-lock-comment-face fontified t) 3272 3276 (c-in-sws t c-is-sws t fontified t) 3276 3277 (c-is-sws t fontified t) 3277 3297 (fontified t) 3297 3299 (face font-lock-keyword-face fontified t) 3299 3385 (fontified t) 3385 3388 (face font-lock-string-face fontified t) 3388 3400 (fontified t) 3400 3401 (fontified t) 3401 3403 (fontified t) 3403 3405 (face font-lock-keyword-face fontified t) 3405 3452 (fontified t) 3452 3457 (face font-lock-constant-face fontified t) 3457 3458 (fontified t) 3458 3459 (fontified t c-is-sws t c-in-sws t) 3459 3460 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 3460 3462 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 3462 3480 (face font-lock-comment-face fontified t c-in-sws t) 3480 3484 (fontified t c-in-sws t c-is-sws t) 3484 3485 (face font-lock-keyword-face fontified t c-is-sws t) 3485 3486 (face font-lock-keyword-face fontified t) 3486 3515 (fontified t) 3515 3517 (face font-lock-keyword-face fontified t) 3517 3535 (fontified t) 3535 3546 (fontified t) 3546 3605 (fontified t) 3605 3607 (face font-lock-string-face fontified t) 3607 3693 (fontified t) 3693 3696 (face font-lock-string-face fontified t) 3696 3711 (fontified t) 3711 3713 (face font-lock-keyword-face fontified t) 3713 3752 (fontified t) 3752 3757 (face font-lock-constant-face fontified t) 3757 3763 (fontified t) 3763 3765 (face font-lock-keyword-face fontified t) 3765 3784 (fontified t) 3784 3795 (fontified t) 3795 3824 (fontified t) 3824 3828 (face font-lock-keyword-face fontified t) 3828 3858 (fontified t) 3858 3862 (face font-lock-constant-face fontified t) 3862 3870 (fontified t) 3870 3873 (fontified t) 3873 3874 (fontified t) 3874 3876 (c-is-sws t c-in-sws t fontified t) 3876 3877 (face font-lock-comment-delimiter-face c-in-sws t c-is-sws t fontified t) 3877 3878 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 3878 3879 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 3879 3880 (face font-lock-comment-face c-in-sws t fontified t) 3880 3881 (face font-lock-comment-face c-in-sws t fontified t) 3881 3882 (face font-lock-comment-face c-in-sws t fontified t) 3882 3883 (face font-lock-comment-face c-in-sws t fontified t) 3883 3884 (face font-lock-comment-face c-in-sws t fontified t) 3884 3885 (face font-lock-comment-face c-in-sws t fontified t) 3885 3886 (face font-lock-comment-face c-in-sws t fontified t) 3886 3887 (face font-lock-comment-face c-in-sws t fontified t) 3887 3888 (face font-lock-comment-face c-in-sws t fontified t) 3888 3889 (face font-lock-comment-face c-in-sws t fontified t) 3889 3890 (c-in-sws t face font-lock-comment-face fontified t) 3890 3891 (c-in-sws t face font-lock-comment-face fontified t) 3891 3892 (c-in-sws t c-is-sws t fontified t) 3892 3893 (c-is-sws t fontified t c-in-sws t) 3893 3894 (face font-lock-keyword-face fontified t c-is-sws t) 3894 3895 (face font-lock-keyword-face fontified t) 3895 3916 (fontified t) 3916 3918 (face font-lock-keyword-face fontified t) 3918 3953 (fontified t) 3953 3958 (face font-lock-constant-face fontified t) 3958 3978 (fontified t) 3978 3983 (face font-lock-constant-face fontified t) 3983 3991 (fontified t) 3991 3995 (face font-lock-keyword-face fontified t) 3995 3996 (fontified t) 3996 3998 (face font-lock-keyword-face fontified t) 3998 4000 (fontified t) 4000 4001 (face font-lock-negation-char-face fontified t) 4001 4034 (fontified t) 4034 4039 (face font-lock-constant-face fontified t) 4039 4059 (fontified t) 4059 4063 (face font-lock-constant-face fontified t) 4063 4071 (fontified t) 4071 4074 (fontified t) 4074 4075 (fontified t) 4075 4077 (fontified t c-is-sws t c-in-sws t) 4077 4078 (face font-lock-comment-delimiter-face fontified t c-in-sws t c-is-sws t) 4078 4079 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 4079 4080 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 4080 4081 (face font-lock-comment-face fontified t c-in-sws t) 4081 4082 (face font-lock-comment-face fontified t c-in-sws t) 4082 4083 (face font-lock-comment-face fontified t c-in-sws t) 4083 4084 (face font-lock-comment-face fontified t c-in-sws t) 4084 4085 (face font-lock-comment-face fontified t c-in-sws t) 4085 4086 (fontified t c-in-sws t c-is-sws t) 4086 4087 (fontified t c-is-sws t c-in-sws t) 4087 4088 (face font-lock-keyword-face fontified t c-is-sws t) 4088 4089 (face font-lock-keyword-face fontified t) 4089 4104 (fontified t) 4104 4108 (fontified t) 4108 4110 (face font-lock-keyword-face fontified t) 4110 4132 (fontified t) 4132 4133 (fontified t) 4133 4139 (fontified t) 4139 4149 (fontified t) 4149 4150 (fontified t) 4150 4151 (fontified t) 4151 4152 (fontified t) 4152 4153 (fontified t) 4153 4154 (fontified t) 4154 4155 (fontified t c-in-sws t c-is-sws t) 4155 4158 (fontified t c-is-sws t c-in-sws t) 4158 4159 (fontified t c-is-sws t) 4159 4160 (fontified t) 4160 4164 (fontified t) 4164 4166 (face font-lock-keyword-face fontified t) 4166 4188 (fontified t) 4188 4189 (fontified t) 4189 4195 (fontified t) 4195 4201 (fontified t) 4201 4202 (fontified t) 4202 4203 (fontified t) 4203 4204 (fontified t) 4204 4205 (fontified t) 4205 4206 (fontified t) 4206 4207 (fontified t) 4207 4208 (fontified t) 4208 4209 (fontified t) 4209 4210 (fontified t) 4210 4211 (fontified t c-is-sws t) 4211 4215 (fontified t) 4215 4216 (fontified t) 4216 4220 (fontified t) 4220 4222 (face font-lock-keyword-face fontified t) 4222 4244 (fontified t) 4244 4245 (fontified t) 4245 4250 (fontified t) 4250 4251 (fontified t rear-nonsticky t) 4251 4257 (fontified t) 4257 4258 (fontified t) 4258 4259 (fontified t) 4259 4260 (fontified t) 4260 4261 (fontified t) 4261 4262 (fontified t) 4262 4263 (fontified t) 4263 4264 (fontified t) 4264 4265 (fontified t) 4265 4266 (fontified t) 4266 4267 (fontified t c-is-sws t) 4267 4272 (fontified t) 4272 4279 (fontified t) 4279 4282 (face font-lock-constant-face fontified t) 4282 4284 (fontified t) 4284 4289 (face font-lock-type-face fontified t) 4289 4290 (face font-lock-type-face c-type c-decl-id-start fontified t) 4290 4291 (fontified t) 4291 4303 (face font-lock-function-name-face fontified t) 4303 4308 (fontified t) 4308 4314 (face font-lock-keyword-face fontified t) 4314 4328 (fontified t) 4328 4331 (face font-lock-type-face fontified t) 4331 4332 (face font-lock-type-face c-type c-decl-id-start fontified t) 4332 4333 (fontified t) 4333 4343 (face font-lock-function-name-face fontified t) 4343 4344 (c-type c-decl-arg-start fontified t) 4344 4345 (face font-lock-type-face fontified t) 4345 4346 (face font-lock-type-face fontified t) 4346 4347 (face font-lock-type-face fontified t) 4347 4348 (fontified t) 4348 4349 (face font-lock-variable-name-face fontified t) 4349 4350 (face font-lock-variable-name-face fontified t) 4350 4351 (face font-lock-variable-name-face fontified t) 4351 4352 (face font-lock-variable-name-face fontified t) 4352 4353 (face font-lock-variable-name-face fontified t) 4353 4354 (face font-lock-variable-name-face fontified t) 4354 4355 (face font-lock-variable-name-face fontified t) 4355 4356 (face font-lock-variable-name-face fontified t) 4356 4357 (face font-lock-variable-name-face fontified t) 4357 4360 (fontified t) 4360 4361 (fontified t) 4361 4363 (fontified t) 4363 4373 (fontified t) 4373 4374 (fontified t) 4374 4375 (fontified t) 4375 4376 (fontified t) 4376 4377 (fontified t) 4377 4386 (fontified t) 4386 4387 (fontified t) 4387 4388 (fontified t) 4388 4389 (fontified t) 4389 4391 (fontified t) 4391 4399 (fontified t) 4399 4401 (fontified t) 4401 4417 (fontified t) 4417 4418 (rear-nonsticky t fontified t) 4418 4420 (fontified t) 4420 4433 (fontified t) 4433 4438 (fontified t) 4438 4439 (fontified t) 4439 4441 (fontified t) 4441 4456 (fontified t) 4456 4457 (fontified t) 4457 4458 (fontified t) 4458 4459 (fontified t) 4459 4460 (fontified t) 4460 4461 (fontified t) 4461 4462 (fontified t) 4462 4463 (fontified t) 4463 4464 (fontified t) 4464 4503 (fontified t) 4503 4507 (fontified t) 4507 4510 (face font-lock-keyword-face fontified t) 4510 4512 (fontified t) 4512 4515 (face font-lock-constant-face fontified t) 4515 4517 (fontified t) 4517 4523 (face font-lock-type-face fontified t) 4523 4524 (fontified t category c-<-as-paren-syntax) 4524 4527 (face font-lock-constant-face fontified t) 4527 4529 (fontified t) 4529 4535 (face font-lock-type-face fontified t) 4535 4536 (c-type c-decl-id-start fontified t category c->-as-paren-syntax) 4536 4538 (fontified t) 4538 4541 (face font-lock-variable-name-face fontified t) 4541 4575 (fontified t) 4575 4586 (fontified t) 4586 4594 (fontified t) 4594 4636 (fontified t) 4636 4639 (face font-lock-keyword-face fontified t) 4639 4641 (fontified t) 4641 4644 (face font-lock-constant-face fontified t) 4644 4646 (fontified t) 4646 4652 (face font-lock-type-face fontified t) 4652 4653 (fontified t category c-<-as-paren-syntax) 4653 4656 (face font-lock-type-face fontified t) 4656 4657 (c-type c-decl-id-start fontified t category c->-as-paren-syntax) 4657 4659 (fontified t) 4659 4662 (face font-lock-variable-name-face fontified t) 4662 4696 (fontified t) 4696 4707 (fontified t) 4707 4710 (fontified t) 4710 4715 (fontified t) 4715 4717 (fontified t c-is-sws t c-in-sws t) 4717 4718 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 4718 4720 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 4720 4755 (face font-lock-comment-face fontified t c-in-sws t) 4755 4757 (fontified t c-in-sws t c-is-sws t) 4757 4758 (face font-lock-keyword-face fontified t c-is-sws t) 4758 4760 (face font-lock-keyword-face fontified t) 4760 4762 (fontified t) 4762 4764 (face font-lock-type-face fontified t) 4764 4765 (face font-lock-type-face c-type c-decl-id-start fontified t) 4765 4766 (fontified t) 4766 4767 (face font-lock-variable-name-face fontified t) 4767 4805 (fontified t) 4805 4808 (face font-lock-keyword-face fontified t) 4808 4810 (fontified t) 4810 4812 (face font-lock-type-face fontified t) 4812 4813 (face font-lock-type-face c-type c-decl-id-start fontified t) 4813 4814 (fontified t) 4814 4815 (face font-lock-variable-name-face fontified t) 4815 4825 (fontified t) 4825 4836 (fontified t) 4836 4872 (fontified t) 4872 4875 (face font-lock-string-face fontified t) 4875 4890 (fontified t) 4890 4892 (face font-lock-type-face fontified t) 4892 4893 (face font-lock-type-face c-type c-decl-id-start fontified t) 4893 4894 (fontified t) 4894 4902 (face font-lock-variable-name-face fontified t) 4902 4908 (fontified t) 4908 4910 (face font-lock-type-face fontified t) 4910 4911 (face font-lock-type-face c-type c-decl-id-start fontified t) 4911 4912 (fontified t) 4912 4921 (face font-lock-variable-name-face fontified t) 4921 4928 (fontified t) 4928 4930 (face font-lock-type-face fontified t) 4930 4931 (face font-lock-type-face c-type c-decl-id-start fontified t) 4931 4932 (fontified t) 4932 4947 (face font-lock-function-name-face fontified t) 4947 4954 (fontified t) 4954 4956 (face font-lock-keyword-face fontified t) 4956 5030 (fontified t) 5030 5033 (face font-lock-constant-face fontified t) 5033 5043 (fontified t) 5043 5050 (face font-lock-string-face fontified t) 5050 5055 (face font-lock-string-face fontified t) 5055 5057 (fontified t) 5057 5061 (fontified t) 5061 5067 (face font-lock-keyword-face fontified t) 5067 5075 (fontified t) 5075 5079 (face font-lock-keyword-face fontified t) 5079 5080 (fontified t) 5080 5082 (face font-lock-keyword-face fontified t) 5082 5158 (fontified t) 5158 5161 (face font-lock-constant-face fontified t) 5161 5171 (fontified t) 5171 5199 (face font-lock-string-face fontified t) 5199 5215 (fontified t) 5215 5219 (face font-lock-string-face fontified t) 5219 5225 (fontified t) 5225 5231 (face font-lock-keyword-face fontified t) 5231 5241 (fontified t) 5241 5247 (face font-lock-keyword-face fontified t) 5247 5255 (fontified t) 5255 5257 (face font-lock-type-face fontified t) 5257 5258 (face font-lock-type-face c-type c-decl-id-start fontified t) 5258 5259 (fontified t) 5259 5270 (face font-lock-function-name-face fontified t) 5270 5396 (fontified t) 5396 5402 (face font-lock-keyword-face fontified t) 5402 5424 (fontified t)) . 1) (undo-tree-id729 . -30) (undo-tree-id730 . -4438) (undo-tree-id731 . -4216) (undo-tree-id732 . -4441) (undo-tree-id733 . 963) (undo-tree-id734 . -4441) (undo-tree-id735 . -4441) (undo-tree-id736 . -368) (undo-tree-id737 . 5033) (undo-tree-id738 . -4245) (undo-tree-id739 . -4245) (undo-tree-id740 . -4418) (undo-tree-id741 . -4438) (undo-tree-id742 . -4386) (undo-tree-id743 . -4386) (undo-tree-id744 . -4388) (undo-tree-id745 . -4388) (undo-tree-id746 . -3870) (undo-tree-id747 . -4206) (undo-tree-id748 . -4245) (undo-tree-id749 . -4245) (undo-tree-id750 . -4386) (undo-tree-id751 . -4245) (undo-tree-id752 . -1770) (undo-tree-id753 . -1770) (undo-tree-id754 . -3395) (undo-tree-id755 . -4266) (undo-tree-id756 . -4262) (undo-tree-id757 . -4460) (undo-tree-id758 . -4460) (undo-tree-id759 . -4216) (undo-tree-id760 . 963) (undo-tree-id761 . -4461) (undo-tree-id762 . -4461) (undo-tree-id763 . -4461) (undo-tree-id764 . -4461) (undo-tree-id765 . -4461) (undo-tree-id766 . -4461) (undo-tree-id767 . -4461) (undo-tree-id768 . -4461) (undo-tree-id769 . -4461) (undo-tree-id770 . -4461) (undo-tree-id771 . -4460) (undo-tree-id772 . -4460) (undo-tree-id773 . -4439) (undo-tree-id774 . -4460) (undo-tree-id775 . -4460) (undo-tree-id776 . -4460) (undo-tree-id777 . -4460) (undo-tree-id778 . -4460) (undo-tree-id779 . -4460) (undo-tree-id780 . -4460) (undo-tree-id781 . -4460) (undo-tree-id782 . -4460) 4461) nil (26692 30694 778502 754000) 0 nil])
([nil nil ((4368 . 4383) (#("e" 0 1 (face font-lock-comment-face c-in-sws t fontified t)) . -4368) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (#("s" 0 1 (face font-lock-comment-face c-in-sws t fontified t)) . -4369) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (#("e" 0 1 (face font-lock-comment-face c-in-sws t fontified t)) . -4370) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (#("t" 0 1 (c-in-sws t face font-lock-comment-face fontified t)) . -4371) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) 4372 (4367 . 4372) (4366 . 4367) (4364 . 4366) (4361 . 4364) (t 26692 30694 780971 445000)) nil (26692 30969 696684 645000) 0 nil])
([nil nil ((4927 . 4928) (4917 . 4927) (4905 . 4917) (#("col" 0 3 (fontified nil)) . 4905) (4905 . 4908) (#("letter_color" 0 12 (fontified nil)) . -4905) (4905 . 4917) (#("color" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . -4905) (undo-tree-id796 . -5) (undo-tree-id797 . -5) (undo-tree-id798 . -5) (undo-tree-id799 . -5) 4910 (4905 . 4910) (#("l" 0 1 (fontified t)) . -4905) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) 4906 (4905 . 4906) (4898 . 4905)) nil (26692 30969 696679 350000) 0 nil])
([nil nil ((#("\\" 0 1 (c-in-sws t c-is-sws t fontified t)) . -4938) (undo-tree-id880 . -1) (undo-tree-id881 . -1) 4939 (4938 . 4939) (t 26692 30969 698970 397000)) nil (26692 31014 218380 968000) 0 nil])
([nil nil ((4505 . 4506) (4498 . 4505) (#("-" 0 1 (fontified t)) . -4498) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (#(" " 0 1 (fontified t)) . -4499) (undo-tree-id874 . -1) (undo-tree-id875 . -1) 4500 (4498 . 4500) (4497 . 4498) (4488 . 4497) (#("sho" 0 3 (fontified nil)) . 4488) (4488 . 4491) (#("show_menu" 0 9 (fontified nil)) . -4488) (4488 . 4497) (#("show" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . -4488) (undo-tree-id876 . -4) (undo-tree-id877 . -4) (undo-tree-id878 . -4) (undo-tree-id879 . -4) 4492 (4488 . 4492) (4485 . 4488) 4485) nil (26692 31014 218379 132000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -4507) (undo-tree-id870 . -2) (undo-tree-id871 . -2) 4509 (4506 . 4509) 4504) nil (26692 31014 218376 825000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -4509) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (#("h" 0 1 (fontified t)) . -4510) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (#("o" 0 1 (fontified t)) . -4511) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (#("w" 0 1 (fontified t)) . -4512) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) 4513 (4509 . 4513) (4507 . 4509)) nil (26692 31014 218375 598000) 0 nil])
([nil current ((1 . 5498) (#("#include \"../include/game.hpp\"
#include \"../include/terminal_input.hpp\"
#include \"../include/utils.hpp\"
#include \"../include/visuals.hpp\"
#include \"../include/word_machine.hpp\"
#include <cctype>
#include <iostream>
#include <string>
#include <unistd.h> // For usleep
#include <vector>
// WORDLE

int WORD_LENGTH = 5;
int AMOUNT_OF_WORDS = 6;

char cursor_char = '_';

int word_position = 0;
bool won = false;
bool lost = false;

std::string solution;
// Stores the letters which get visualized
std::vector<std::vector<std::string>> enteredWords;

// Array needed for colorization
std::vector<std::vector<int>> letter_color;

std::string attempt = \"\";

// Dictates the current row
int attempt_counter = 0;

constexpr int GREEN_ID = 1;
constexpr int YELLOW_ID = 2;
constexpr int GREY_ID = 3;

bool invalid_word_msg = false;
bool invalid_length_msg = false;
bool show_menu = false;

void try_guess() {
  //
  for (int i = 0; i < WORD_LENGTH; i++) {
    if (!enteredWords[attempt_counter][i].empty()) {
      attempt += std::tolower(enteredWords[attempt_counter][i][0]);
    } else {
      attempt += cursor_char; // or some sentinel char
    }
  }
  if (WORD_LENGTH == 5) {
    if (acceptableWords5.count(attempt) == 0) {
      invalid_word_msg = true;
      attempt = \"\";
      return;
    }

  } else if (WORD_LENGTH == 6) {
    if (acceptableWords6.count(attempt) == 0) {
      invalid_word_msg = true;
      attempt = \"\";
      return;
    }
  } else if (WORD_LENGTH == 7) {
    if (acceptableWords7.count(attempt) == 0) {
      invalid_word_msg = true;
      attempt = \"\";
      return;
    }
  }
  if (attempt == solution) {
    won = true;
  }
  // Track matched positions
  std::vector<bool> matchedSolution = {false};
  std::vector<bool> matchedAttempt = {false};
  matchedSolution.resize(WORD_LENGTH);
  matchedAttempt.resize(WORD_LENGTH);

  // First pass: Green letters
  for (int i = 0; i < WORD_LENGTH; i++) {
    if (attempt[i] == solution[i]) {
      letter_color[attempt_counter][i] = GREEN_ID;
      matchedSolution[i] = true;
      matchedAttempt[i] = true;
    }
  }

  // Second pass: Yellow letters
  for (int i = 0; i < WORD_LENGTH; i++) {
    if (matchedAttempt[i])
      continue; // already green

    bool found_yellow = false;
    for (int j = 0; j < WORD_LENGTH; j++) {
      if (!matchedSolution[j] && attempt[i] == solution[j]) {
        letter_color[attempt_counter][i] = YELLOW_ID;
        matchedSolution[j] = true;
        found_yellow = true;
        break;
      }
    }
    if (!found_yellow) {
      letter_color[attempt_counter][i] = GREY_ID;
    }
  }
  attempt = \"\";
  word_position = 0;
  if (attempt_counter + 1 == AMOUNT_OF_WORDS) {
    lost = true;
    return;
  }
  attempt_counter++;
  enteredWords[attempt_counter][word_position] = \"_\";
}

void handle_input() {
  // Display player input
  if (current_key >= 'a' && current_key <= 'z' && word_position < WORD_LENGTH) {
    enteredWords[attempt_counter][word_position] =
        std::string(1, current_key - 32);
    current_key = 0; // reset key to not trigger spam
    word_position++;
    if (word_position < WORD_LENGTH) {
      enteredWords[attempt_counter][word_position] = '_';
    }
  }

  if (current_key == 32) {
    current_key = 0; // reset key to not trigger spam
    word_position++;
    if (word_position < WORD_LENGTH) {
      enteredWords[attempt_counter][word_position] = '_';
    }
  }

  if (backspace_pressed) {
    backspace_pressed = false; // reset immediately
    if (word_position > 0) {
      if (word_position < WORD_LENGTH) {
        enteredWords[attempt_counter][word_position] = \"\";
      }
      word_position--;
      enteredWords[attempt_counter][word_position] = '_';
    }
  }

  if (enter_pressed) {
    enter_pressed = false;
    if (word_position == WORD_LENGTH) {
      try_guess();
    } else {
      invalid_length_msg = true;
    }
  }
  // TOGGLE MENU
  if (tab_pressed) {
    if (show_menu) {
      tab_pressed = false;
      show_menu = false;
    } else if (!show_menu) {
      tab_pressed = false;
      show_menu = true;
    }
  }
  // MENU
  if (show_menu) {
    if (current_key == 49) {
      setup_game(5);
    }
    if (current_key == 50) {
      setup_game(6);
    }
    if (current_key == 51) {
      setup_game(7);
    }
  }
}

std::string get_solution() { return solution; }

void setup_game(int word_mode) {
  // reset everything
  WORD_LENGTH = word_mode;

  solution = random_word();

  word_position = 0;
  attempt_counter = 0;

  show_menu = false;
  
  enteredWords.resize(AMOUNT_OF_WORDS);

  for (std::vector<std::string> &row : enteredWords) {
    row.resize(WORD_LENGTH);
  }

  letter_color.resize(AMOUNT_OF_WORDS);
  for (std::vector<int> &row : letter_color) {
    row.resize(WORD_LENGTH);
  }

  // intialize the board with one space
  for (int i = 0; i < AMOUNT_OF_WORDS; i++) {
    for (int j = 0; j < WORD_LENGTH; j++) {
      enteredWords[i][j] = \" \";
      letter_color[i][j] = 0;
    }
  }
}

int won_code = 1;
int lost_code = 2;

int check_game_over() {
  if (won) {
    clear_screen();
    print_board(enteredWords, won_code);
    std::cout << \"You won!\\n\";
    return 0;
  } else if (lost) {
    clear_screen();
    print_board(enteredWords, lost_code);
    std::cout << \"You lost! The answer was: \" << solution << \"\\n\";
    return 0;
  }
  return 69;
}

int update_game() {
  clear_screen();
  print_board(enteredWords, 0);
  handle_input();
  clear_screen();
  print_board(enteredWords, 0);

  return check_game_over();
}
" 505 506 (category c-<-as-paren-syntax) 517 518 (category c-<-as-paren-syntax) 529 530 (category c->-as-paren-syntax) 530 531 (category c->-as-paren-syntax) 591 592 (category c-<-as-paren-syntax) 603 604 (category c-<-as-paren-syntax) 607 608 (category c->-as-paren-syntax) 608 609 (category c->-as-paren-syntax) 1690 1691 (category c-<-as-paren-syntax) 1695 1696 (category c->-as-paren-syntax) 1737 1738 (category c-<-as-paren-syntax) 1742 1743 (category c->-as-paren-syntax) 4077 4078 (c-in-sws t c-is-sws t) 4078 4087 (c-in-sws t) 4087 4088 (c-is-sws t) 4210 4216 (fontified t) 4216 4220 (fontified t) 4220 4222 (face font-lock-keyword-face fontified t) 4222 4279 (fontified t) 4279 4282 (face font-lock-constant-face fontified t) 4282 4284 (fontified t) 4284 4289 (face font-lock-type-face fontified t) 4289 4290 (face font-lock-type-face c-type c-decl-id-start fontified t) 4290 4291 (fontified t) 4291 4303 (face font-lock-function-name-face fontified t) 4303 4308 (fontified t) 4308 4314 (face font-lock-keyword-face fontified t) 4314 4328 (fontified t) 4328 4331 (face font-lock-type-face fontified t) 4331 4332 (face font-lock-type-face c-type c-decl-id-start fontified t) 4332 4333 (fontified t) 4333 4343 (face font-lock-function-name-face fontified t) 4343 4344 (c-type c-decl-arg-start fontified t) 4344 4347 (face font-lock-type-face fontified t) 4347 4348 (fontified t) 4348 4357 (face font-lock-variable-name-face fontified t) 4357 4360 (fontified t) 4360 4361 (fontified t) 4361 4363 (c-is-sws t c-in-sws t fontified t) 4363 4364 (face font-lock-comment-delimiter-face c-is-sws t c-in-sws t fontified t) 4364 4365 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 4365 4366 (face font-lock-comment-delimiter-face c-in-sws t fontified t) 4366 4367 (face font-lock-comment-face c-in-sws t fontified t) 4367 4368 (face font-lock-comment-face c-in-sws t fontified t) 4368 4369 (face font-lock-comment-face c-in-sws t fontified t) 4369 4370 (face font-lock-comment-face c-in-sws t fontified t) 4370 4371 (face font-lock-comment-face c-in-sws t fontified t) 4371 4372 (face font-lock-comment-face c-in-sws t fontified t) 4372 4373 (c-in-sws t face font-lock-comment-face fontified t) 4373 4374 (c-in-sws t face font-lock-comment-face fontified t) 4374 4375 (c-in-sws t face font-lock-comment-face fontified t) 4375 4376 (c-in-sws t face font-lock-comment-face fontified t) 4376 4377 (c-in-sws t face font-lock-comment-face fontified t) 4377 4378 (c-in-sws t face font-lock-comment-face fontified t) 4378 4379 (c-in-sws t face font-lock-comment-face fontified t) 4379 4380 (c-in-sws t face font-lock-comment-face fontified t) 4380 4381 (c-in-sws t face font-lock-comment-face fontified t) 4381 4382 (c-in-sws t face font-lock-comment-face fontified t) 4382 4383 (c-in-sws t face font-lock-comment-face fontified t) 4383 4384 (fontified t c-in-sws t c-is-sws t) 4384 4385 (fontified t c-in-sws t c-is-sws t) 4385 4386 (fontified t c-is-sws t) 4386 4484 (fontified t) 4484 4485 (fontified t) 4485 4487 (fontified t) 4487 4496 (fontified t) 4496 4497 (fontified t) 4497 4498 (fontified t) 4498 4499 (fontified t) 4499 4500 (face font-lock-constant-face fontified t) 4500 4501 (face font-lock-constant-face fontified t) 4501 4502 (face font-lock-constant-face fontified t) 4502 4503 (face font-lock-constant-face fontified t) 4503 4504 (face font-lock-constant-face fontified t) 4504 4505 (fontified t) 4505 4506 (fontified t) 4506 4508 (fontified t) 4508 4509 (fontified t) 4509 4548 (fontified t) 4548 4552 (fontified t) 4552 4555 (face font-lock-keyword-face fontified t) 4555 4557 (fontified t) 4557 4560 (face font-lock-constant-face fontified t) 4560 4562 (fontified t) 4562 4568 (face font-lock-type-face fontified t) 4568 4569 (fontified t category c-<-as-paren-syntax) 4569 4572 (face font-lock-constant-face fontified t) 4572 4574 (fontified t) 4574 4580 (face font-lock-type-face fontified t) 4580 4581 (c-type c-decl-id-start fontified t category c->-as-paren-syntax) 4581 4583 (fontified t) 4583 4586 (face font-lock-variable-name-face fontified t) 4586 4681 (fontified t) 4681 4684 (face font-lock-keyword-face fontified t) 4684 4686 (fontified t) 4686 4689 (face font-lock-constant-face fontified t) 4689 4691 (fontified t) 4691 4697 (face font-lock-type-face fontified t) 4697 4698 (fontified t category c-<-as-paren-syntax) 4698 4701 (face font-lock-type-face fontified t) 4701 4702 (c-type c-decl-id-start fontified t category c->-as-paren-syntax) 4702 4704 (fontified t) 4704 4707 (face font-lock-variable-name-face fontified t) 4707 4759 (fontified t) 4759 4760 (fontified t) 4760 4762 (fontified t c-is-sws t c-in-sws t) 4762 4763 (face font-lock-comment-delimiter-face fontified t c-is-sws t c-in-sws t) 4763 4765 (face font-lock-comment-delimiter-face fontified t c-in-sws t) 4765 4800 (face font-lock-comment-face fontified t c-in-sws t) 4800 4802 (fontified t c-in-sws t c-is-sws t) 4802 4803 (face font-lock-keyword-face fontified t c-is-sws t) 4803 4805 (face font-lock-keyword-face fontified t) 4805 4807 (fontified t) 4807 4809 (face font-lock-type-face fontified t) 4809 4810 (face font-lock-type-face c-type c-decl-id-start fontified t) 4810 4811 (fontified t) 4811 4812 (face font-lock-variable-name-face fontified t) 4812 4850 (fontified t) 4850 4853 (face font-lock-keyword-face fontified t) 4853 4855 (fontified t) 4855 4857 (face font-lock-type-face fontified t) 4857 4858 (face font-lock-type-face c-type c-decl-id-start fontified t) 4858 4859 (fontified t) 4859 4860 (face font-lock-variable-name-face fontified t) 4860 4890 (fontified t) 4890 4917 (fontified t) 4917 4920 (face font-lock-string-face fontified t) 4920 4921 (fontified t) 4921 4922 (fontified t) 4922 4928 (fontified t) 4928 4940 (fontified t) 4940 4941 (fontified t) 4941 4942 (fontified t) 4942 4943 (fontified t) 4943 4944 (fontified t) 4944 4945 (fontified t) 4945 4946 (fontified t) 4946 4947 (fontified t) 4947 4948 (fontified t) 4948 4949 (fontified t) 4949 4950 (fontified t) 4950 4951 (fontified t) 4951 4952 (fontified t) 4952 4957 (fontified t) 4957 4958 (fontified t) 4958 4961 (fontified t) 4961 4962 (fontified t) 4962 4963 (fontified t c-is-sws t) 4963 4965 (fontified t) 4965 4967 (face font-lock-type-face fontified t) 4967 4968 (face font-lock-type-face c-type c-decl-id-start fontified t) 4968 4969 (fontified t) 4969 4977 (face font-lock-variable-name-face fontified t) 4977 4983 (fontified t) 4983 4985 (face font-lock-type-face fontified t) 4985 4986 (face font-lock-type-face c-type c-decl-id-start fontified t) 4986 4987 (fontified t) 4987 4996 (face font-lock-variable-name-face fontified t) 4996 5003 (fontified t) 5003 5005 (face font-lock-type-face fontified t) 5005 5006 (face font-lock-type-face c-type c-decl-id-start fontified t) 5006 5007 (fontified t) 5007 5022 (face font-lock-function-name-face fontified t) 5022 5029 (fontified t) 5029 5031 (face font-lock-keyword-face fontified t) 5031 5060 (fontified t) 5060 5105 (fontified t) 5105 5108 (face font-lock-constant-face fontified t) 5108 5118 (fontified t) 5118 5130 (face font-lock-string-face fontified t) 5130 5136 (fontified t) 5136 5142 (face font-lock-keyword-face fontified t) 5142 5150 (fontified t) 5150 5154 (face font-lock-keyword-face fontified t) 5154 5155 (fontified t) 5155 5157 (face font-lock-keyword-face fontified t) 5157 5233 (fontified t) 5233 5236 (face font-lock-constant-face fontified t) 5236 5246 (fontified t) 5246 5274 (face font-lock-string-face fontified t) 5274 5290 (fontified t) 5290 5294 (face font-lock-string-face fontified t) 5294 5300 (fontified t) 5300 5306 (face font-lock-keyword-face fontified t) 5306 5316 (fontified t) 5316 5322 (face font-lock-keyword-face fontified t) 5322 5330 (fontified t) 5330 5332 (face font-lock-type-face fontified t) 5332 5333 (face font-lock-type-face c-type c-decl-id-start fontified t) 5333 5334 (fontified t) 5334 5345 (face font-lock-function-name-face fontified t) 5345 5471 (fontified t) 5471 5477 (face font-lock-keyword-face fontified t) 5477 5499 (fontified t)) . 1) (undo-tree-id816 . -30) (undo-tree-id817 . -4460) (undo-tree-id818 . -4278) (undo-tree-id819 . -4508) (undo-tree-id820 . 991) (undo-tree-id821 . -4508) (undo-tree-id822 . -4508) (undo-tree-id823 . -4266) (undo-tree-id824 . -4245) (undo-tree-id825 . -4408) (undo-tree-id826 . -4245) (undo-tree-id827 . -1770) (undo-tree-id828 . -1770) (undo-tree-id829 . -3395) (undo-tree-id830 . -4508) (undo-tree-id831 . 991) (undo-tree-id832 . -4507) (undo-tree-id833 . -4507) (undo-tree-id834 . -4278) (undo-tree-id835 . -4508) (undo-tree-id836 . -4508) (undo-tree-id837 . -4508) (undo-tree-id838 . -4508) (undo-tree-id839 . -4508) (undo-tree-id840 . -4506) (undo-tree-id841 . -4507) (undo-tree-id842 . -4507) (undo-tree-id843 . -4507) (undo-tree-id844 . -4507) (undo-tree-id845 . -4507) (undo-tree-id846 . -4507) 4508) nil (26692 31014 218360 983000) 0 nil])
nil
